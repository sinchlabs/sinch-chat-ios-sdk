//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/cnt/v1alpha1/content_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sinch_Cnt_V1alpha1_ContentServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Cnt_V1alpha1_ContentServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol? { get }

  func storeFileFromUrl(
    _ request: Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest, Sinch_Cnt_V1alpha1_StoreFileFromUrlResponse>

  func storeMultipleFilesFromUrl(
    _ request: Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest, Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlResponse>

  func storeBinaryData(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest, Sinch_Cnt_V1alpha1_StoreBinaryDataResponse>

  func getOccupancyReport(
    _ request: Sinch_Cnt_V1alpha1_GetOccupancyReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest, Sinch_Cnt_V1alpha1_GetOccupancyReportResponse>

  func deleteFile(
    _ request: Sinch_Cnt_V1alpha1_DeleteFileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_DeleteFileRequest, Sinch_Cnt_V1alpha1_DeleteFileResponse>

  func getPreSignedUrl(
    _ request: Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest, Sinch_Cnt_V1alpha1_GetPreSignedUrlResponse>

  func getFile(
    _ request: Sinch_Cnt_V1alpha1_GetFileRequest,
    callOptions: CallOptions?,
    handler: @escaping (Sinch_Cnt_V1alpha1_GetFileResponse) -> Void
  ) -> ServerStreamingCall<Sinch_Cnt_V1alpha1_GetFileRequest, Sinch_Cnt_V1alpha1_GetFileResponse>
}

extension Sinch_Cnt_V1alpha1_ContentServiceClientProtocol {
  internal var serviceName: String {
    return "sinch.cnt.v1alpha1.ContentService"
  }

  /// Unary call to StoreFileFromUrl
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreFileFromUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeFileFromUrl(
    _ request: Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest, Sinch_Cnt_V1alpha1_StoreFileFromUrlResponse> {
    return self.makeUnaryCall(
      path: "/sinch.cnt.v1alpha1.ContentService/StoreFileFromUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreFileFromUrlInterceptors() ?? []
    )
  }

  /// Unary call to StoreMultipleFilesFromUrl
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreMultipleFilesFromUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeMultipleFilesFromUrl(
    _ request: Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest, Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlResponse> {
    return self.makeUnaryCall(
      path: "/sinch.cnt.v1alpha1.ContentService/StoreMultipleFilesFromUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreMultipleFilesFromUrlInterceptors() ?? []
    )
  }

  /// Client streaming call to StoreBinaryData
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func storeBinaryData(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest, Sinch_Cnt_V1alpha1_StoreBinaryDataResponse> {
    return self.makeClientStreamingCall(
      path: "/sinch.cnt.v1alpha1.ContentService/StoreBinaryData",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreBinaryDataInterceptors() ?? []
    )
  }

  /// Unary call to GetOccupancyReport
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOccupancyReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOccupancyReport(
    _ request: Sinch_Cnt_V1alpha1_GetOccupancyReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest, Sinch_Cnt_V1alpha1_GetOccupancyReportResponse> {
    return self.makeUnaryCall(
      path: "/sinch.cnt.v1alpha1.ContentService/GetOccupancyReport",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOccupancyReportInterceptors() ?? []
    )
  }

  /// Unary call to DeleteFile
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteFile(
    _ request: Sinch_Cnt_V1alpha1_DeleteFileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_DeleteFileRequest, Sinch_Cnt_V1alpha1_DeleteFileResponse> {
    return self.makeUnaryCall(
      path: "/sinch.cnt.v1alpha1.ContentService/DeleteFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFileInterceptors() ?? []
    )
  }

  /// Unary call to GetPreSignedUrl
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPreSignedUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPreSignedUrl(
    _ request: Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest, Sinch_Cnt_V1alpha1_GetPreSignedUrlResponse> {
    return self.makeUnaryCall(
      path: "/sinch.cnt.v1alpha1.ContentService/GetPreSignedUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPreSignedUrlInterceptors() ?? []
    )
  }

  /// Server streaming call to GetFile
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFile.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getFile(
    _ request: Sinch_Cnt_V1alpha1_GetFileRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Sinch_Cnt_V1alpha1_GetFileResponse) -> Void
  ) -> ServerStreamingCall<Sinch_Cnt_V1alpha1_GetFileRequest, Sinch_Cnt_V1alpha1_GetFileResponse> {
    return self.makeServerStreamingCall(
      path: "/sinch.cnt.v1alpha1.ContentService/GetFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFileInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'storeFileFromUrl'.
  func makeStoreFileFromUrlInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest, Sinch_Cnt_V1alpha1_StoreFileFromUrlResponse>]

  /// - Returns: Interceptors to use when invoking 'storeMultipleFilesFromUrl'.
  func makeStoreMultipleFilesFromUrlInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest, Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlResponse>]

  /// - Returns: Interceptors to use when invoking 'storeBinaryData'.
  func makeStoreBinaryDataInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest, Sinch_Cnt_V1alpha1_StoreBinaryDataResponse>]

  /// - Returns: Interceptors to use when invoking 'getOccupancyReport'.
  func makeGetOccupancyReportInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest, Sinch_Cnt_V1alpha1_GetOccupancyReportResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteFile'.
  func makeDeleteFileInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_DeleteFileRequest, Sinch_Cnt_V1alpha1_DeleteFileResponse>]

  /// - Returns: Interceptors to use when invoking 'getPreSignedUrl'.
  func makeGetPreSignedUrlInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest, Sinch_Cnt_V1alpha1_GetPreSignedUrlResponse>]

  /// - Returns: Interceptors to use when invoking 'getFile'.
  func makeGetFileInterceptors() -> [ClientInterceptor<Sinch_Cnt_V1alpha1_GetFileRequest, Sinch_Cnt_V1alpha1_GetFileResponse>]
}

internal final class Sinch_Cnt_V1alpha1_ContentServiceClient: Sinch_Cnt_V1alpha1_ContentServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.cnt.v1alpha1.ContentService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Cnt_V1alpha1_ContentServiceTestClient: Sinch_Cnt_V1alpha1_ContentServiceClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Cnt_V1alpha1_ContentServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the StoreFileFromUrl RPC. This must be called
  /// before calling 'storeFileFromUrl'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeStoreFileFromUrlResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest, Sinch_Cnt_V1alpha1_StoreFileFromUrlResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/StoreFileFromUrl", requestHandler: requestHandler)
  }

  internal func enqueueStoreFileFromUrlResponse(
    _ response: Sinch_Cnt_V1alpha1_StoreFileFromUrlResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreFileFromUrlRequest>) -> () = { _ in }
  )  {
    let stream = self.makeStoreFileFromUrlResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'StoreFileFromUrl'
  internal var hasStoreFileFromUrlResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/StoreFileFromUrl")
  }

  /// Make a unary response for the StoreMultipleFilesFromUrl RPC. This must be called
  /// before calling 'storeMultipleFilesFromUrl'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeStoreMultipleFilesFromUrlResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest, Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/StoreMultipleFilesFromUrl", requestHandler: requestHandler)
  }

  internal func enqueueStoreMultipleFilesFromUrlResponse(
    _ response: Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreMultipleFilesFromUrlRequest>) -> () = { _ in }
  )  {
    let stream = self.makeStoreMultipleFilesFromUrlResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'StoreMultipleFilesFromUrl'
  internal var hasStoreMultipleFilesFromUrlResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/StoreMultipleFilesFromUrl")
  }

  /// Make a unary response for the StoreBinaryData RPC. This must be called
  /// before calling 'storeBinaryData'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeStoreBinaryDataResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest, Sinch_Cnt_V1alpha1_StoreBinaryDataResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/StoreBinaryData", requestHandler: requestHandler)
  }

  internal func enqueueStoreBinaryDataResponse(
    _ response: Sinch_Cnt_V1alpha1_StoreBinaryDataResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_StoreBinaryDataRequest>) -> () = { _ in }
  )  {
    let stream = self.makeStoreBinaryDataResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'StoreBinaryData'
  internal var hasStoreBinaryDataResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/StoreBinaryData")
  }

  /// Make a unary response for the GetOccupancyReport RPC. This must be called
  /// before calling 'getOccupancyReport'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetOccupancyReportResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest, Sinch_Cnt_V1alpha1_GetOccupancyReportResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/GetOccupancyReport", requestHandler: requestHandler)
  }

  internal func enqueueGetOccupancyReportResponse(
    _ response: Sinch_Cnt_V1alpha1_GetOccupancyReportResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetOccupancyReportRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetOccupancyReportResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetOccupancyReport'
  internal var hasGetOccupancyReportResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/GetOccupancyReport")
  }

  /// Make a unary response for the DeleteFile RPC. This must be called
  /// before calling 'deleteFile'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteFileResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_DeleteFileRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_DeleteFileRequest, Sinch_Cnt_V1alpha1_DeleteFileResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/DeleteFile", requestHandler: requestHandler)
  }

  internal func enqueueDeleteFileResponse(
    _ response: Sinch_Cnt_V1alpha1_DeleteFileResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_DeleteFileRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteFileResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteFile'
  internal var hasDeleteFileResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/DeleteFile")
  }

  /// Make a unary response for the GetPreSignedUrl RPC. This must be called
  /// before calling 'getPreSignedUrl'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetPreSignedUrlResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest, Sinch_Cnt_V1alpha1_GetPreSignedUrlResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.cnt.v1alpha1.ContentService/GetPreSignedUrl", requestHandler: requestHandler)
  }

  internal func enqueueGetPreSignedUrlResponse(
    _ response: Sinch_Cnt_V1alpha1_GetPreSignedUrlResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetPreSignedUrlRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetPreSignedUrlResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetPreSignedUrl'
  internal var hasGetPreSignedUrlResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/GetPreSignedUrl")
  }

  /// Make a streaming response for the GetFile RPC. This must be called
  /// before calling 'getFile'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetFileResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetFileRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Sinch_Cnt_V1alpha1_GetFileRequest, Sinch_Cnt_V1alpha1_GetFileResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/sinch.cnt.v1alpha1.ContentService/GetFile", requestHandler: requestHandler)
  }

  internal func enqueueGetFileResponses(
    _ responses: [Sinch_Cnt_V1alpha1_GetFileResponse],
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Cnt_V1alpha1_GetFileRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetFileResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'GetFile'
  internal var hasGetFileResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.cnt.v1alpha1.ContentService/GetFile")
  }
}

