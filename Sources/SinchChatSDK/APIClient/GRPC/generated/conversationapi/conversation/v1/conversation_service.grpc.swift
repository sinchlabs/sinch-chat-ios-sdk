//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/conversation/v1/conversation_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Conversation API
///
/// Usage: instantiate `Sinch_Conversationapi_Conversation_V1_ConversationClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Conversation_V1_ConversationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol? { get }

  func getConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_GetConversationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_GetConversationRequest, Sinch_Conversationapi_Type_Conversation>

  func updateConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest, Sinch_Conversationapi_Type_Conversation>

  func listConversations(
    _ request: Sinch_Conversationapi_Conversation_V1_ListConversationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest, Sinch_Conversationapi_Conversation_V1_ListConversationsResponse>

  func listMessages(
    _ request: Sinch_Conversationapi_Conversation_V1_ListMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest, Sinch_Conversationapi_Conversation_V1_ListMessagesResponse>

  func injectMessage(
    _ request: Sinch_Conversationapi_Conversation_V1_InjectMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func stopActiveConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_CreateConversationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest, Sinch_Conversationapi_Type_Conversation>

  func deleteConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Sinch_Conversationapi_Conversation_V1_ConversationClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.conversation.v1.Conversation"
  }

  /// Get a conversation
  ///
  /// Retrieves a conversation by id. A conversation has two participating
  /// entities, an app and a contact. 
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConversation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_GetConversationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_GetConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/GetConversation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConversationInterceptors() ?? []
    )
  }

  ///  Update a conversation
  ///
  /// This operation updates a conversation which can, for instance, be used to
  /// update the metadata associated with a conversation. 
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateConversation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/UpdateConversation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateConversationInterceptors() ?? []
    )
  }

  /// List conversations
  ///
  /// This operation lists all conversations that are associated with an app and/or a contact. 
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConversations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listConversations(
    _ request: Sinch_Conversationapi_Conversation_V1_ListConversationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest, Sinch_Conversationapi_Conversation_V1_ListConversationsResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/ListConversations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConversationsInterceptors() ?? []
    )
  }

  /// List messages
  ///
  /// This operation lists all messages associated with a conversation or a contact.
  /// The messages are ordered by their accept_time property in descending order,
  /// where accept_time is a timestamp of when the message was enqueued by the Conversation API.
  /// This means messages received most recently will be listed first. 
  ///
  /// - Parameters:
  ///   - request: Request to send to ListMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listMessages(
    _ request: Sinch_Conversationapi_Conversation_V1_ListMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest, Sinch_Conversationapi_Conversation_V1_ListMessagesResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/ListMessages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMessagesInterceptors() ?? []
    )
  }

  /// Inject messages
  ///
  /// This operation injects a conversation message in to a specific conversation. 
  ///
  /// - Parameters:
  ///   - request: Request to send to InjectMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func injectMessage(
    _ request: Sinch_Conversationapi_Conversation_V1_InjectMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/InjectMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInjectMessageInterceptors() ?? []
    )
  }

  /// Stop conversation
  ///
  /// This operation stops the referenced conversation, if the conversation is still active.
  /// A new conversation will be created if a new message is exchanged between the app or contact
  /// that was part of the stopped conversation. 
  ///
  /// - Parameters:
  ///   - request: Request to send to StopActiveConversation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopActiveConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/StopActiveConversation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopActiveConversationInterceptors() ?? []
    )
  }

  /// Creates a conversation
  ///
  /// Creates a new empty conversation. It is generally not needed to create
  /// a conversation explicitly since sending or receiving a message
  /// automatically creates a new conversation if it does not already
  /// exist between the given app and contact.
  /// Creating empty conversation is useful if the metadata of the conversation
  /// should be populated when the first message in the conversation is a contact message
  /// or the first message in the conversation comes out-of-band and
  /// needs to be injected with InjectMessage endpoint. 
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateConversation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_CreateConversationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/CreateConversation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateConversationInterceptors() ?? []
    )
  }

  /// Deletes a conversation
  ///
  /// Deletes a conversation together with all the messages sent as part of the conversation. 
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteConversation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteConversation(
    _ request: Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.conversation.v1.Conversation/DeleteConversation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteConversationInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getConversation'.
  func makeGetConversationInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_GetConversationRequest, Sinch_Conversationapi_Type_Conversation>]

  /// - Returns: Interceptors to use when invoking 'updateConversation'.
  func makeUpdateConversationInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest, Sinch_Conversationapi_Type_Conversation>]

  /// - Returns: Interceptors to use when invoking 'listConversations'.
  func makeListConversationsInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest, Sinch_Conversationapi_Conversation_V1_ListConversationsResponse>]

  /// - Returns: Interceptors to use when invoking 'listMessages'.
  func makeListMessagesInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest, Sinch_Conversationapi_Conversation_V1_ListMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'injectMessage'.
  func makeInjectMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'stopActiveConversation'.
  func makeStopActiveConversationInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'createConversation'.
  func makeCreateConversationInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest, Sinch_Conversationapi_Type_Conversation>]

  /// - Returns: Interceptors to use when invoking 'deleteConversation'.
  func makeDeleteConversationInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal final class Sinch_Conversationapi_Conversation_V1_ConversationClient: Sinch_Conversationapi_Conversation_V1_ConversationClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.conversation.v1.Conversation service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Conversation_V1_ConversationTestClient: Sinch_Conversationapi_Conversation_V1_ConversationClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Conversation_V1_ConversationClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the GetConversation RPC. This must be called
  /// before calling 'getConversation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetConversationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_GetConversationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_GetConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/GetConversation", requestHandler: requestHandler)
  }

  internal func enqueueGetConversationResponse(
    _ response: Sinch_Conversationapi_Type_Conversation,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_GetConversationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetConversationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetConversation'
  internal var hasGetConversationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/GetConversation")
  }

  /// Make a unary response for the UpdateConversation RPC. This must be called
  /// before calling 'updateConversation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeUpdateConversationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/UpdateConversation", requestHandler: requestHandler)
  }

  internal func enqueueUpdateConversationResponse(
    _ response: Sinch_Conversationapi_Type_Conversation,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_UpdateConversationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpdateConversationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateConversation'
  internal var hasUpdateConversationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/UpdateConversation")
  }

  /// Make a unary response for the ListConversations RPC. This must be called
  /// before calling 'listConversations'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListConversationsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest, Sinch_Conversationapi_Conversation_V1_ListConversationsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/ListConversations", requestHandler: requestHandler)
  }

  internal func enqueueListConversationsResponse(
    _ response: Sinch_Conversationapi_Conversation_V1_ListConversationsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_ListConversationsRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListConversationsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListConversations'
  internal var hasListConversationsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/ListConversations")
  }

  /// Make a unary response for the ListMessages RPC. This must be called
  /// before calling 'listMessages'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListMessagesResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest, Sinch_Conversationapi_Conversation_V1_ListMessagesResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/ListMessages", requestHandler: requestHandler)
  }

  internal func enqueueListMessagesResponse(
    _ response: Sinch_Conversationapi_Conversation_V1_ListMessagesResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_ListMessagesRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListMessagesResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListMessages'
  internal var hasListMessagesResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/ListMessages")
  }

  /// Make a unary response for the InjectMessage RPC. This must be called
  /// before calling 'injectMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeInjectMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/InjectMessage", requestHandler: requestHandler)
  }

  internal func enqueueInjectMessageResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_InjectMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeInjectMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'InjectMessage'
  internal var hasInjectMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/InjectMessage")
  }

  /// Make a unary response for the StopActiveConversation RPC. This must be called
  /// before calling 'stopActiveConversation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeStopActiveConversationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/StopActiveConversation", requestHandler: requestHandler)
  }

  internal func enqueueStopActiveConversationResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_StopActiveConversationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeStopActiveConversationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'StopActiveConversation'
  internal var hasStopActiveConversationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/StopActiveConversation")
  }

  /// Make a unary response for the CreateConversation RPC. This must be called
  /// before calling 'createConversation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeCreateConversationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest, Sinch_Conversationapi_Type_Conversation> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/CreateConversation", requestHandler: requestHandler)
  }

  internal func enqueueCreateConversationResponse(
    _ response: Sinch_Conversationapi_Type_Conversation,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_CreateConversationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCreateConversationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateConversation'
  internal var hasCreateConversationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/CreateConversation")
  }

  /// Make a unary response for the DeleteConversation RPC. This must be called
  /// before calling 'deleteConversation'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteConversationResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.conversation.v1.Conversation/DeleteConversation", requestHandler: requestHandler)
  }

  internal func enqueueDeleteConversationResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Conversation_V1_DeleteConversationRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteConversationResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteConversation'
  internal var hasDeleteConversationResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.conversation.v1.Conversation/DeleteConversation")
  }
}

