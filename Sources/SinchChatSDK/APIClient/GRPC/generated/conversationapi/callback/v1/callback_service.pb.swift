// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/callback/v1/callback_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Conversationapi_Callback_V1_SendCallbackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The ID of the app if the callback is associated with an app.
  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  /// Required. The timestamp when the callback was accepted by the Conversation API.
  var acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._acceptedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._acceptedTime = newValue}
  }
  /// Returns true if `acceptedTime` has been explicitly set.
  var hasAcceptedTime: Bool {return _storage._acceptedTime != nil}
  /// Clears the value of `acceptedTime`. Subsequent reads from it will return its default value.
  mutating func clearAcceptedTime() {_uniqueStorage()._acceptedTime = nil}

  /// Required. Timestamp for when the event occurred, generated by the underlying channel associated with the callback.
  var eventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  var hasEventTime: Bool {return _storage._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  mutating func clearEventTime() {_uniqueStorage()._eventTime = nil}

  /// Required. The Project ID.
  var projectID: String {
    get {return _storage._projectID}
    set {_uniqueStorage()._projectID = newValue}
  }

  var callback: OneOf_Callback? {
    get {return _storage._callback}
    set {_uniqueStorage()._callback = newValue}
  }

  var messageDeliveryReport: Sinch_Conversationapi_Type_MessageDeliveryReport {
    get {
      if case .messageDeliveryReport(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_MessageDeliveryReport()
    }
    set {_uniqueStorage()._callback = .messageDeliveryReport(newValue)}
  }

  var eventDeliveryReport: Sinch_Conversationapi_Type_EventDeliveryReport {
    get {
      if case .eventDeliveryReport(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_EventDeliveryReport()
    }
    set {_uniqueStorage()._callback = .eventDeliveryReport(newValue)}
  }

  var message: Sinch_Conversationapi_Type_ConversationMessage {
    get {
      if case .message(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ConversationMessage()
    }
    set {_uniqueStorage()._callback = .message(newValue)}
  }

  var event: Sinch_Conversationapi_Type_ConversationEvent {
    get {
      if case .event(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ConversationEvent()
    }
    set {_uniqueStorage()._callback = .event(newValue)}
  }

  var unsupportedCallback: Sinch_Conversationapi_Type_UnsupportedCallback {
    get {
      if case .unsupportedCallback(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_UnsupportedCallback()
    }
    set {_uniqueStorage()._callback = .unsupportedCallback(newValue)}
  }

  var contactCreateNotification: Sinch_Conversationapi_Type_ContactCreateNotification {
    get {
      if case .contactCreateNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ContactCreateNotification()
    }
    set {_uniqueStorage()._callback = .contactCreateNotification(newValue)}
  }

  var contactDeleteNotification: Sinch_Conversationapi_Type_ContactDeleteNotification {
    get {
      if case .contactDeleteNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ContactDeleteNotification()
    }
    set {_uniqueStorage()._callback = .contactDeleteNotification(newValue)}
  }

  var conversationStartNotification: Sinch_Conversationapi_Type_ConversationStartNotification {
    get {
      if case .conversationStartNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ConversationStartNotification()
    }
    set {_uniqueStorage()._callback = .conversationStartNotification(newValue)}
  }

  var conversationStopNotification: Sinch_Conversationapi_Type_ConversationStopNotification {
    get {
      if case .conversationStopNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ConversationStopNotification()
    }
    set {_uniqueStorage()._callback = .conversationStopNotification(newValue)}
  }

  var contactMergeNotification: Sinch_Conversationapi_Type_ContactMergeNotification {
    get {
      if case .contactMergeNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ContactMergeNotification()
    }
    set {_uniqueStorage()._callback = .contactMergeNotification(newValue)}
  }

  var optInNotification: Sinch_Conversationapi_Type_OptInNotification {
    get {
      if case .optInNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_OptInNotification()
    }
    set {_uniqueStorage()._callback = .optInNotification(newValue)}
  }

  var optOutNotification: Sinch_Conversationapi_Type_OptOutNotification {
    get {
      if case .optOutNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_OptOutNotification()
    }
    set {_uniqueStorage()._callback = .optOutNotification(newValue)}
  }

  var capabilityNotification: Sinch_Conversationapi_Type_CapabilityNotification {
    get {
      if case .capabilityNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_CapabilityNotification()
    }
    set {_uniqueStorage()._callback = .capabilityNotification(newValue)}
  }

  var conversationDeleteNotification: Sinch_Conversationapi_Type_ConversationDeleteNotification {
    get {
      if case .conversationDeleteNotification(let v)? = _storage._callback {return v}
      return Sinch_Conversationapi_Type_ConversationDeleteNotification()
    }
    set {_uniqueStorage()._callback = .conversationDeleteNotification(newValue)}
  }

  /// Optional. The metadata_message will be used to propagate Mo metadata to callbacks.
  var messageMetadata: String {
    get {return _storage._messageMetadata}
    set {_uniqueStorage()._messageMetadata = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Callback: Equatable {
    case messageDeliveryReport(Sinch_Conversationapi_Type_MessageDeliveryReport)
    case eventDeliveryReport(Sinch_Conversationapi_Type_EventDeliveryReport)
    case message(Sinch_Conversationapi_Type_ConversationMessage)
    case event(Sinch_Conversationapi_Type_ConversationEvent)
    case unsupportedCallback(Sinch_Conversationapi_Type_UnsupportedCallback)
    case contactCreateNotification(Sinch_Conversationapi_Type_ContactCreateNotification)
    case contactDeleteNotification(Sinch_Conversationapi_Type_ContactDeleteNotification)
    case conversationStartNotification(Sinch_Conversationapi_Type_ConversationStartNotification)
    case conversationStopNotification(Sinch_Conversationapi_Type_ConversationStopNotification)
    case contactMergeNotification(Sinch_Conversationapi_Type_ContactMergeNotification)
    case optInNotification(Sinch_Conversationapi_Type_OptInNotification)
    case optOutNotification(Sinch_Conversationapi_Type_OptOutNotification)
    case capabilityNotification(Sinch_Conversationapi_Type_CapabilityNotification)
    case conversationDeleteNotification(Sinch_Conversationapi_Type_ConversationDeleteNotification)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Callback_V1_SendCallbackRequest.OneOf_Callback, rhs: Sinch_Conversationapi_Callback_V1_SendCallbackRequest.OneOf_Callback) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.messageDeliveryReport, .messageDeliveryReport): return {
        guard case .messageDeliveryReport(let l) = lhs, case .messageDeliveryReport(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.eventDeliveryReport, .eventDeliveryReport): return {
        guard case .eventDeliveryReport(let l) = lhs, case .eventDeliveryReport(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.event, .event): return {
        guard case .event(let l) = lhs, case .event(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unsupportedCallback, .unsupportedCallback): return {
        guard case .unsupportedCallback(let l) = lhs, case .unsupportedCallback(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactCreateNotification, .contactCreateNotification): return {
        guard case .contactCreateNotification(let l) = lhs, case .contactCreateNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactDeleteNotification, .contactDeleteNotification): return {
        guard case .contactDeleteNotification(let l) = lhs, case .contactDeleteNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationStartNotification, .conversationStartNotification): return {
        guard case .conversationStartNotification(let l) = lhs, case .conversationStartNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationStopNotification, .conversationStopNotification): return {
        guard case .conversationStopNotification(let l) = lhs, case .conversationStopNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactMergeNotification, .contactMergeNotification): return {
        guard case .contactMergeNotification(let l) = lhs, case .contactMergeNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.optInNotification, .optInNotification): return {
        guard case .optInNotification(let l) = lhs, case .optInNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.optOutNotification, .optOutNotification): return {
        guard case .optOutNotification(let l) = lhs, case .optOutNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.capabilityNotification, .capabilityNotification): return {
        guard case .capabilityNotification(let l) = lhs, case .capabilityNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationDeleteNotification, .conversationDeleteNotification): return {
        guard case .conversationDeleteNotification(let l) = lhs, case .conversationDeleteNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.callback.v1"

extension Sinch_Conversationapi_Callback_V1_SendCallbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCallbackRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "accepted_time"),
    3: .standard(proto: "event_time"),
    4: .standard(proto: "project_id"),
    5: .standard(proto: "message_delivery_report"),
    6: .standard(proto: "event_delivery_report"),
    7: .same(proto: "message"),
    8: .same(proto: "event"),
    9: .standard(proto: "unsupported_callback"),
    10: .standard(proto: "contact_create_notification"),
    11: .standard(proto: "contact_delete_notification"),
    12: .standard(proto: "conversation_start_notification"),
    13: .standard(proto: "conversation_stop_notification"),
    14: .standard(proto: "contact_merge_notification"),
    15: .standard(proto: "opt_in_notification"),
    16: .standard(proto: "opt_out_notification"),
    17: .standard(proto: "capability_notification"),
    18: .standard(proto: "conversation_delete_notification"),
    19: .standard(proto: "message_metadata"),
  ]

  fileprivate class _StorageClass {
    var _appID: String = String()
    var _acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _eventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _projectID: String = String()
    var _callback: Sinch_Conversationapi_Callback_V1_SendCallbackRequest.OneOf_Callback?
    var _messageMetadata: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appID = source._appID
      _acceptedTime = source._acceptedTime
      _eventTime = source._eventTime
      _projectID = source._projectID
      _callback = source._callback
      _messageMetadata = source._messageMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._appID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._acceptedTime) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._eventTime) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._projectID) }()
        case 5: try {
          var v: Sinch_Conversationapi_Type_MessageDeliveryReport?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .messageDeliveryReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .messageDeliveryReport(v)
          }
        }()
        case 6: try {
          var v: Sinch_Conversationapi_Type_EventDeliveryReport?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .eventDeliveryReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .eventDeliveryReport(v)
          }
        }()
        case 7: try {
          var v: Sinch_Conversationapi_Type_ConversationMessage?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .message(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .message(v)
          }
        }()
        case 8: try {
          var v: Sinch_Conversationapi_Type_ConversationEvent?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .event(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .event(v)
          }
        }()
        case 9: try {
          var v: Sinch_Conversationapi_Type_UnsupportedCallback?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .unsupportedCallback(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .unsupportedCallback(v)
          }
        }()
        case 10: try {
          var v: Sinch_Conversationapi_Type_ContactCreateNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .contactCreateNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .contactCreateNotification(v)
          }
        }()
        case 11: try {
          var v: Sinch_Conversationapi_Type_ContactDeleteNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .contactDeleteNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .contactDeleteNotification(v)
          }
        }()
        case 12: try {
          var v: Sinch_Conversationapi_Type_ConversationStartNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .conversationStartNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .conversationStartNotification(v)
          }
        }()
        case 13: try {
          var v: Sinch_Conversationapi_Type_ConversationStopNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .conversationStopNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .conversationStopNotification(v)
          }
        }()
        case 14: try {
          var v: Sinch_Conversationapi_Type_ContactMergeNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .contactMergeNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .contactMergeNotification(v)
          }
        }()
        case 15: try {
          var v: Sinch_Conversationapi_Type_OptInNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .optInNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .optInNotification(v)
          }
        }()
        case 16: try {
          var v: Sinch_Conversationapi_Type_OptOutNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .optOutNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .optOutNotification(v)
          }
        }()
        case 17: try {
          var v: Sinch_Conversationapi_Type_CapabilityNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .capabilityNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .capabilityNotification(v)
          }
        }()
        case 18: try {
          var v: Sinch_Conversationapi_Type_ConversationDeleteNotification?
          var hadOneofValue = false
          if let current = _storage._callback {
            hadOneofValue = true
            if case .conversationDeleteNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._callback = .conversationDeleteNotification(v)
          }
        }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._messageMetadata) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 1)
      }
      try { if let v = _storage._acceptedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._eventTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._projectID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._projectID, fieldNumber: 4)
      }
      switch _storage._callback {
      case .messageDeliveryReport?: try {
        guard case .messageDeliveryReport(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .eventDeliveryReport?: try {
        guard case .eventDeliveryReport(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .message?: try {
        guard case .message(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .event?: try {
        guard case .event(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .unsupportedCallback?: try {
        guard case .unsupportedCallback(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .contactCreateNotification?: try {
        guard case .contactCreateNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .contactDeleteNotification?: try {
        guard case .contactDeleteNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .conversationStartNotification?: try {
        guard case .conversationStartNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .conversationStopNotification?: try {
        guard case .conversationStopNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case .contactMergeNotification?: try {
        guard case .contactMergeNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }()
      case .optInNotification?: try {
        guard case .optInNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .optOutNotification?: try {
        guard case .optOutNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .capabilityNotification?: try {
        guard case .capabilityNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      case .conversationDeleteNotification?: try {
        guard case .conversationDeleteNotification(let v)? = _storage._callback else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }()
      case nil: break
      }
      if !_storage._messageMetadata.isEmpty {
        try visitor.visitSingularStringField(value: _storage._messageMetadata, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Callback_V1_SendCallbackRequest, rhs: Sinch_Conversationapi_Callback_V1_SendCallbackRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._acceptedTime != rhs_storage._acceptedTime {return false}
        if _storage._eventTime != rhs_storage._eventTime {return false}
        if _storage._projectID != rhs_storage._projectID {return false}
        if _storage._callback != rhs_storage._callback {return false}
        if _storage._messageMetadata != rhs_storage._messageMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
