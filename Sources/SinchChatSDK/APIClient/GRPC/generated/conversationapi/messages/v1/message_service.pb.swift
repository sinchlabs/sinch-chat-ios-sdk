// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/messages/v1/message_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Conversationapi_Messages_V1_SendMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project ID.
  var projectID: String = String()

  /// Required. The ID of the app sending the message.
  var appID: String = String()

  /// Required. The recipient can be an existing contact or a list of channel identities.
  /// When no contact for the specified project exists with the given channel identities
  /// a new contact is created automatically. 
  var recipient: Sinch_Conversationapi_Type_Recipient {
    get {return _recipient ?? Sinch_Conversationapi_Type_Recipient()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  /// Required. The message to send.
  var message: Sinch_Conversationapi_Type_AppMessage {
    get {return _message ?? Sinch_Conversationapi_Type_AppMessage()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  /// Optional. Overwrites the default callback url for delivery reports for this message
  /// The REST URL should be of the form: scheme://host[:port]/path
  /// where scheme is http or https.
  /// The gRPC URL should be of the form: dns://host[:port]
  /// (See: https://github.com/grpc/grpc/blob/master/doc/naming.md). 
  var callbackURL: String = String()

  /// Optional. Explicitly define the channels and order in which they are tried when sending the message.
  /// Note that collection can't contain 'CHANNEL_UNSPECIFIED' value.
  /// Which channels the API will try and their priority is defined by:
  /// 1. channel_priority_order if available.
  /// 2. recipient.identified_by.channel_identities if available.
  /// 3. When recipient is a contact_id:
  ///   - if a conversation with the contact exists: the active channel of the conversation is tried first.
  ///   - the existing channels for the contact are ordered by contact channel preferences if given.
  ///   - lastly the existing channels for the contact are ordered by the app priority.
  var channelPriorityOrder: [Sinch_Conversationapi_Type_ConversationChannel] = []

  /// Optional. Eventual metadata that should be associated to the message.
  /// The provided metadata will also be added to the contact metadata if a new one is created.
  var messageMetadata: String = String()

  /// Optional. Define what queue the message should be placed in.
  /// Note that most messages should be placed in the default NORMAL_PRIORITY.
  /// QUEUE_HIGH_PRIORITY should only be used for messages that needs to start processing ASAP.
  /// Note that rate limits still apply to both queues.
  var queue: Sinch_Conversationapi_Type_MessageQueue = .normalPriority

  /// Optional. Duration for trying to send the message.
  /// Passed onto for channels which have support for it and
  /// emulated by Conversation API for channels without ttl support
  /// but message retract/unsend functionality.
  /// Channel failover will not be performed for messages with
  /// expired TTL. 
  var ttl: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _ttl ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_ttl = newValue}
  }
  /// Returns true if `ttl` has been explicitly set.
  var hasTtl: Bool {return self._ttl != nil}
  /// Clears the value of `ttl`. Subsequent reads from it will return its default value.
  mutating func clearTtl() {self._ttl = nil}

  /// Optional. Channel-specific properties.
  /// The key in the map must point to a valid channel property key as
  /// defined by the enum ChannelPropertyKeys.
  /// The maximum allowed property value length is 1024 characters. 
  var channelProperties: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: Sinch_Conversationapi_Type_Recipient? = nil
  fileprivate var _message: Sinch_Conversationapi_Type_AppMessage? = nil
  fileprivate var _ttl: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct Sinch_Conversationapi_Messages_V1_SendMessageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Message id.
  var messageID: String = String()

  /// Output only. Timestamp corresponding to when the Conversation API
  /// accepted the message for delivery to the referenced contact. 
  var acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acceptedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acceptedTime = newValue}
  }
  /// Returns true if `acceptedTime` has been explicitly set.
  var hasAcceptedTime: Bool {return self._acceptedTime != nil}
  /// Clears the value of `acceptedTime`. Subsequent reads from it will return its default value.
  mutating func clearAcceptedTime() {self._acceptedTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Sinch_Conversationapi_Messages_V1_GetMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project ID.
  var projectID: String = String()

  /// Required. The conversation message ID.
  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Conversationapi_Messages_V1_DeleteMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project ID.
  var projectID: String = String()

  /// Required. The ID of the message to be deleted.
  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.messages.v1"

extension Sinch_Conversationapi_Messages_V1_SendMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "app_id"),
    3: .same(proto: "recipient"),
    4: .same(proto: "message"),
    5: .standard(proto: "callback_url"),
    6: .standard(proto: "channel_priority_order"),
    7: .standard(proto: "message_metadata"),
    8: .same(proto: "queue"),
    9: .same(proto: "ttl"),
    10: .standard(proto: "channel_properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._recipient) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._message) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.callbackURL) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.channelPriorityOrder) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.messageMetadata) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.queue) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._ttl) }()
      case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.channelProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 2)
    }
    try { if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.callbackURL.isEmpty {
      try visitor.visitSingularStringField(value: self.callbackURL, fieldNumber: 5)
    }
    if !self.channelPriorityOrder.isEmpty {
      try visitor.visitPackedEnumField(value: self.channelPriorityOrder, fieldNumber: 6)
    }
    if !self.messageMetadata.isEmpty {
      try visitor.visitSingularStringField(value: self.messageMetadata, fieldNumber: 7)
    }
    if self.queue != .normalPriority {
      try visitor.visitSingularEnumField(value: self.queue, fieldNumber: 8)
    }
    try { if let v = self._ttl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.channelProperties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.channelProperties, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Messages_V1_SendMessageRequest, rhs: Sinch_Conversationapi_Messages_V1_SendMessageRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs._recipient != rhs._recipient {return false}
    if lhs._message != rhs._message {return false}
    if lhs.callbackURL != rhs.callbackURL {return false}
    if lhs.channelPriorityOrder != rhs.channelPriorityOrder {return false}
    if lhs.messageMetadata != rhs.messageMetadata {return false}
    if lhs.queue != rhs.queue {return false}
    if lhs._ttl != rhs._ttl {return false}
    if lhs.channelProperties != rhs.channelProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Messages_V1_SendMessageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendMessageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
    2: .standard(proto: "accepted_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._acceptedTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    try { if let v = self._acceptedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Messages_V1_SendMessageResponse, rhs: Sinch_Conversationapi_Messages_V1_SendMessageResponse) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs._acceptedTime != rhs._acceptedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Messages_V1_GetMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "message_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Messages_V1_GetMessageRequest, rhs: Sinch_Conversationapi_Messages_V1_GetMessageRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Messages_V1_DeleteMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "message_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Messages_V1_DeleteMessageRequest, rhs: Sinch_Conversationapi_Messages_V1_DeleteMessageRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
