//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/messages/v1/message_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Message API
///
/// Usage: instantiate `Sinch_Conversationapi_Messages_V1_MessagesClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Messages_V1_MessagesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol? { get }

  func sendMessage(
    _ request: Sinch_Conversationapi_Messages_V1_SendMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_SendMessageRequest, Sinch_Conversationapi_Messages_V1_SendMessageResponse>

  func getMessage(
    _ request: Sinch_Conversationapi_Messages_V1_GetMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_GetMessageRequest, Sinch_Conversationapi_Type_ConversationMessage>

  func deleteMessage(
    _ request: Sinch_Conversationapi_Messages_V1_DeleteMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Sinch_Conversationapi_Messages_V1_MessagesClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.messages.v1.Messages"
  }

  ///  Send a message
  ///
  /// Sends a message to the referenced contact from the referenced app.
  /// Note that this operation enqueues the message in a queues so a successful
  /// response only indicates that the message has been queued.
  /// The message is added to the active conversation with the contact if such conversation exists.
  /// If no active conversation exists a new one is started automatically. 
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMessage(
    _ request: Sinch_Conversationapi_Messages_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_SendMessageRequest, Sinch_Conversationapi_Messages_V1_SendMessageResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.messages.v1.Messages/SendMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  /// Get a message
  ///
  /// Retrieves a message by id. 
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMessage(
    _ request: Sinch_Conversationapi_Messages_V1_GetMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_GetMessageRequest, Sinch_Conversationapi_Type_ConversationMessage> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.messages.v1.Messages/GetMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageInterceptors() ?? []
    )
  }

  /// Deletes a message
  ///
  /// Deletes a message that is part of a conversation.
  /// Removing the last message of a conversation will not delete the conversation. 
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteMessage(
    _ request: Sinch_Conversationapi_Messages_V1_DeleteMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.messages.v1.Messages/DeleteMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMessageInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Messages_V1_SendMessageRequest, Sinch_Conversationapi_Messages_V1_SendMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'getMessage'.
  func makeGetMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Messages_V1_GetMessageRequest, Sinch_Conversationapi_Type_ConversationMessage>]

  /// - Returns: Interceptors to use when invoking 'deleteMessage'.
  func makeDeleteMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal final class Sinch_Conversationapi_Messages_V1_MessagesClient: Sinch_Conversationapi_Messages_V1_MessagesClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.messages.v1.Messages service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Messages_V1_MessagesTestClient: Sinch_Conversationapi_Messages_V1_MessagesClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Messages_V1_MessagesClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the SendMessage RPC. This must be called
  /// before calling 'sendMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeSendMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_SendMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Messages_V1_SendMessageRequest, Sinch_Conversationapi_Messages_V1_SendMessageResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.messages.v1.Messages/SendMessage", requestHandler: requestHandler)
  }

  internal func enqueueSendMessageResponse(
    _ response: Sinch_Conversationapi_Messages_V1_SendMessageResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_SendMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeSendMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SendMessage'
  internal var hasSendMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.messages.v1.Messages/SendMessage")
  }

  /// Make a unary response for the GetMessage RPC. This must be called
  /// before calling 'getMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_GetMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Messages_V1_GetMessageRequest, Sinch_Conversationapi_Type_ConversationMessage> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.messages.v1.Messages/GetMessage", requestHandler: requestHandler)
  }

  internal func enqueueGetMessageResponse(
    _ response: Sinch_Conversationapi_Type_ConversationMessage,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_GetMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetMessage'
  internal var hasGetMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.messages.v1.Messages/GetMessage")
  }

  /// Make a unary response for the DeleteMessage RPC. This must be called
  /// before calling 'deleteMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.messages.v1.Messages/DeleteMessage", requestHandler: requestHandler)
  }

  internal func enqueueDeleteMessageResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Messages_V1_DeleteMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteMessage'
  internal var hasDeleteMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.messages.v1.Messages/DeleteMessage")
  }
}

