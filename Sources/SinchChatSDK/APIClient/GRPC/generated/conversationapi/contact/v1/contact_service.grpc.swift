//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/contact/v1/contact_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Contact API
///
/// Usage: instantiate `Sinch_Conversationapi_Contact_V1_ContactClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Contact_V1_ContactClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol? { get }

  func createContact(
    _ request: Sinch_Conversationapi_Contact_V1_CreateContactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_CreateContactRequest, Sinch_Conversationapi_Type_Contact>

  func getContact(
    _ request: Sinch_Conversationapi_Contact_V1_GetContactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_GetContactRequest, Sinch_Conversationapi_Type_Contact>

  func deleteContact(
    _ request: Sinch_Conversationapi_Contact_V1_DeleteContactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_DeleteContactRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateContact(
    _ request: Sinch_Conversationapi_Contact_V1_UpdateContactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_UpdateContactRequest, Sinch_Conversationapi_Type_Contact>

  func listContacts(
    _ request: Sinch_Conversationapi_Contact_V1_ListContactsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_ListContactsRequest, Sinch_Conversationapi_Contact_V1_ListContactsResponse>

  func mergeContact(
    _ request: Sinch_Conversationapi_Contact_V1_MergeContactRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_MergeContactRequest, Sinch_Conversationapi_Type_Contact>

  func getContactChannelProfile(
    _ request: Sinch_Conversationapi_Contact_V1_ChannelProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest, Sinch_Conversationapi_Contact_V1_ChannelProfileResponse>
}

extension Sinch_Conversationapi_Contact_V1_ContactClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.contact.v1.Contact"
  }

  /// Create a Contact
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createContact(
    _ request: Sinch_Conversationapi_Contact_V1_CreateContactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_CreateContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/CreateContact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateContactInterceptors() ?? []
    )
  }

  /// Get a Contact
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContact(
    _ request: Sinch_Conversationapi_Contact_V1_GetContactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_GetContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/GetContact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactInterceptors() ?? []
    )
  }

  /// Delete a Contact
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteContact(
    _ request: Sinch_Conversationapi_Contact_V1_DeleteContactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_DeleteContactRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/DeleteContact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteContactInterceptors() ?? []
    )
  }

  /// Update a Contact
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateContact(
    _ request: Sinch_Conversationapi_Contact_V1_UpdateContactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_UpdateContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/UpdateContact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }

  /// Get contacts
  ///
  /// - Parameters:
  ///   - request: Request to send to ListContacts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listContacts(
    _ request: Sinch_Conversationapi_Contact_V1_ListContactsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_ListContactsRequest, Sinch_Conversationapi_Contact_V1_ListContactsResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/ListContacts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListContactsInterceptors() ?? []
    )
  }

  /// Merge two contacts
  ///
  /// The remaining contact will contain all conversations that the removed
  /// contact did. If both contacts had conversations within the same App,
  /// messages from the removed contact will be merged into corresponding active
  /// conversations in the destination contact. Channel
  /// identities will be moved from the source contact to the destination contact
  /// only for channels that weren't present there before. Moved channel
  /// identities will be placed at the bottom of the channel priority list.
  /// Optional fields from the source contact will be copied only if
  /// corresponding fields in the destination contact are empty The contact being
  /// removed cannot be referenced after this call. 
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mergeContact(
    _ request: Sinch_Conversationapi_Contact_V1_MergeContactRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_MergeContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/MergeContact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMergeContactInterceptors() ?? []
    )
  }

  /// Get channel contact profile
  ///
  /// Get user profile from specific channel using contact channel identity.
  /// Supported only on MESSENGER channel. 
  ///
  /// - Parameters:
  ///   - request: Request to send to GetContactChannelProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContactChannelProfile(
    _ request: Sinch_Conversationapi_Contact_V1_ChannelProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest, Sinch_Conversationapi_Contact_V1_ChannelProfileResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.contact.v1.Contact/GetContactChannelProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetContactChannelProfileInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createContact'.
  func makeCreateContactInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_CreateContactRequest, Sinch_Conversationapi_Type_Contact>]

  /// - Returns: Interceptors to use when invoking 'getContact'.
  func makeGetContactInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_GetContactRequest, Sinch_Conversationapi_Type_Contact>]

  /// - Returns: Interceptors to use when invoking 'deleteContact'.
  func makeDeleteContactInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_DeleteContactRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateContact'.
  func makeUpdateContactInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_UpdateContactRequest, Sinch_Conversationapi_Type_Contact>]

  /// - Returns: Interceptors to use when invoking 'listContacts'.
  func makeListContactsInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_ListContactsRequest, Sinch_Conversationapi_Contact_V1_ListContactsResponse>]

  /// - Returns: Interceptors to use when invoking 'mergeContact'.
  func makeMergeContactInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_MergeContactRequest, Sinch_Conversationapi_Type_Contact>]

  /// - Returns: Interceptors to use when invoking 'getContactChannelProfile'.
  func makeGetContactChannelProfileInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest, Sinch_Conversationapi_Contact_V1_ChannelProfileResponse>]
}

internal final class Sinch_Conversationapi_Contact_V1_ContactClient: Sinch_Conversationapi_Contact_V1_ContactClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.contact.v1.Contact service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Contact_V1_ContactTestClient: Sinch_Conversationapi_Contact_V1_ContactClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Contact_V1_ContactClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateContact RPC. This must be called
  /// before calling 'createContact'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeCreateContactResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_CreateContactRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_CreateContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/CreateContact", requestHandler: requestHandler)
  }

  internal func enqueueCreateContactResponse(
    _ response: Sinch_Conversationapi_Type_Contact,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_CreateContactRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCreateContactResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateContact'
  internal var hasCreateContactResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/CreateContact")
  }

  /// Make a unary response for the GetContact RPC. This must be called
  /// before calling 'getContact'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetContactResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_GetContactRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_GetContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/GetContact", requestHandler: requestHandler)
  }

  internal func enqueueGetContactResponse(
    _ response: Sinch_Conversationapi_Type_Contact,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_GetContactRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetContactResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetContact'
  internal var hasGetContactResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/GetContact")
  }

  /// Make a unary response for the DeleteContact RPC. This must be called
  /// before calling 'deleteContact'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteContactResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_DeleteContactRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_DeleteContactRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/DeleteContact", requestHandler: requestHandler)
  }

  internal func enqueueDeleteContactResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_DeleteContactRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteContactResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteContact'
  internal var hasDeleteContactResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/DeleteContact")
  }

  /// Make a unary response for the UpdateContact RPC. This must be called
  /// before calling 'updateContact'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeUpdateContactResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_UpdateContactRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_UpdateContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/UpdateContact", requestHandler: requestHandler)
  }

  internal func enqueueUpdateContactResponse(
    _ response: Sinch_Conversationapi_Type_Contact,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_UpdateContactRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpdateContactResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateContact'
  internal var hasUpdateContactResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/UpdateContact")
  }

  /// Make a unary response for the ListContacts RPC. This must be called
  /// before calling 'listContacts'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListContactsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_ListContactsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_ListContactsRequest, Sinch_Conversationapi_Contact_V1_ListContactsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/ListContacts", requestHandler: requestHandler)
  }

  internal func enqueueListContactsResponse(
    _ response: Sinch_Conversationapi_Contact_V1_ListContactsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_ListContactsRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListContactsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListContacts'
  internal var hasListContactsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/ListContacts")
  }

  /// Make a unary response for the MergeContact RPC. This must be called
  /// before calling 'mergeContact'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeMergeContactResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_MergeContactRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_MergeContactRequest, Sinch_Conversationapi_Type_Contact> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/MergeContact", requestHandler: requestHandler)
  }

  internal func enqueueMergeContactResponse(
    _ response: Sinch_Conversationapi_Type_Contact,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_MergeContactRequest>) -> () = { _ in }
  )  {
    let stream = self.makeMergeContactResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'MergeContact'
  internal var hasMergeContactResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/MergeContact")
  }

  /// Make a unary response for the GetContactChannelProfile RPC. This must be called
  /// before calling 'getContactChannelProfile'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetContactChannelProfileResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest, Sinch_Conversationapi_Contact_V1_ChannelProfileResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.contact.v1.Contact/GetContactChannelProfile", requestHandler: requestHandler)
  }

  internal func enqueueGetContactChannelProfileResponse(
    _ response: Sinch_Conversationapi_Contact_V1_ChannelProfileResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Contact_V1_ChannelProfileRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetContactChannelProfileResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetContactChannelProfile'
  internal var hasGetContactChannelProfileResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.contact.v1.Contact/GetContactChannelProfile")
  }
}

