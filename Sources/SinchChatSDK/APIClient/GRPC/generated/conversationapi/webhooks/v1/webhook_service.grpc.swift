//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/webhooks/v1/webhook_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Webhook API
///
/// Usage: instantiate `Sinch_Conversationapi_Webhooks_V1_WebhooksClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Webhooks_V1_WebhooksClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol? { get }

  func createWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest, Sinch_Conversationapi_Type_Webhook>

  func updateWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest, Sinch_Conversationapi_Type_Webhook>

  func deleteWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest, Sinch_Conversationapi_Type_Webhook>

  func listWebhooks(
    _ request: Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest, Sinch_Conversationapi_Webhooks_V1_ListWebhooksResponse>
}

extension Sinch_Conversationapi_Webhooks_V1_WebhooksClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.webhooks.v1.Webhooks"
  }

  /// Create a new webhook
  ///
  /// Creates a webhook for receiving callbacks on specific triggers.
  /// You can create up to 20 webhooks per app. 
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWebhook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.webhooks.v1.Webhooks/CreateWebhook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateWebhookInterceptors() ?? []
    )
  }

  /// Update an existing webhook
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWebhook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.webhooks.v1.Webhooks/UpdateWebhook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWebhookInterceptors() ?? []
    )
  }

  /// Delete an existing webhook
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWebhook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.webhooks.v1.Webhooks/DeleteWebhook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWebhookInterceptors() ?? []
    )
  }

  /// Get a webhook
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWebhook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getWebhook(
    _ request: Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.webhooks.v1.Webhooks/GetWebhook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWebhookInterceptors() ?? []
    )
  }

  /// List all webhooks for a given app
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWebhooks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listWebhooks(
    _ request: Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest, Sinch_Conversationapi_Webhooks_V1_ListWebhooksResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.webhooks.v1.Webhooks/ListWebhooks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListWebhooksInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createWebhook'.
  func makeCreateWebhookInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest, Sinch_Conversationapi_Type_Webhook>]

  /// - Returns: Interceptors to use when invoking 'updateWebhook'.
  func makeUpdateWebhookInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest, Sinch_Conversationapi_Type_Webhook>]

  /// - Returns: Interceptors to use when invoking 'deleteWebhook'.
  func makeDeleteWebhookInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getWebhook'.
  func makeGetWebhookInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest, Sinch_Conversationapi_Type_Webhook>]

  /// - Returns: Interceptors to use when invoking 'listWebhooks'.
  func makeListWebhooksInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest, Sinch_Conversationapi_Webhooks_V1_ListWebhooksResponse>]
}

internal final class Sinch_Conversationapi_Webhooks_V1_WebhooksClient: Sinch_Conversationapi_Webhooks_V1_WebhooksClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.webhooks.v1.Webhooks service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Webhooks_V1_WebhooksTestClient: Sinch_Conversationapi_Webhooks_V1_WebhooksClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Webhooks_V1_WebhooksClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateWebhook RPC. This must be called
  /// before calling 'createWebhook'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeCreateWebhookResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.webhooks.v1.Webhooks/CreateWebhook", requestHandler: requestHandler)
  }

  internal func enqueueCreateWebhookResponse(
    _ response: Sinch_Conversationapi_Type_Webhook,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_CreateWebhookRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCreateWebhookResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateWebhook'
  internal var hasCreateWebhookResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.webhooks.v1.Webhooks/CreateWebhook")
  }

  /// Make a unary response for the UpdateWebhook RPC. This must be called
  /// before calling 'updateWebhook'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeUpdateWebhookResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.webhooks.v1.Webhooks/UpdateWebhook", requestHandler: requestHandler)
  }

  internal func enqueueUpdateWebhookResponse(
    _ response: Sinch_Conversationapi_Type_Webhook,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_UpdateWebhookRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpdateWebhookResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateWebhook'
  internal var hasUpdateWebhookResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.webhooks.v1.Webhooks/UpdateWebhook")
  }

  /// Make a unary response for the DeleteWebhook RPC. This must be called
  /// before calling 'deleteWebhook'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteWebhookResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.webhooks.v1.Webhooks/DeleteWebhook", requestHandler: requestHandler)
  }

  internal func enqueueDeleteWebhookResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_DeleteWebhookRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteWebhookResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteWebhook'
  internal var hasDeleteWebhookResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.webhooks.v1.Webhooks/DeleteWebhook")
  }

  /// Make a unary response for the GetWebhook RPC. This must be called
  /// before calling 'getWebhook'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetWebhookResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest, Sinch_Conversationapi_Type_Webhook> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.webhooks.v1.Webhooks/GetWebhook", requestHandler: requestHandler)
  }

  internal func enqueueGetWebhookResponse(
    _ response: Sinch_Conversationapi_Type_Webhook,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_GetWebhookRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetWebhookResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetWebhook'
  internal var hasGetWebhookResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.webhooks.v1.Webhooks/GetWebhook")
  }

  /// Make a unary response for the ListWebhooks RPC. This must be called
  /// before calling 'listWebhooks'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListWebhooksResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest, Sinch_Conversationapi_Webhooks_V1_ListWebhooksResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.webhooks.v1.Webhooks/ListWebhooks", requestHandler: requestHandler)
  }

  internal func enqueueListWebhooksResponse(
    _ response: Sinch_Conversationapi_Webhooks_V1_ListWebhooksResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Webhooks_V1_ListWebhooksRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListWebhooksResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListWebhooks'
  internal var hasListWebhooksResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.webhooks.v1.Webhooks/ListWebhooks")
  }
}

