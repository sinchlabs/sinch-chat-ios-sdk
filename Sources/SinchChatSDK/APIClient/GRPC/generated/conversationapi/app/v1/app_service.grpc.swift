//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/app/v1/app_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The App management API
///
/// Usage: instantiate `Sinch_Conversationapi_App_V1_AppClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_App_V1_AppClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol? { get }

  func createApp(
    _ request: Sinch_Conversationapi_App_V1_CreateAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_CreateAppRequest, Sinch_Conversationapi_Type_App>

  func updateApp(
    _ request: Sinch_Conversationapi_App_V1_UpdateAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_UpdateAppRequest, Sinch_Conversationapi_Type_App>

  func deleteApp(
    _ request: Sinch_Conversationapi_App_V1_DeleteAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_DeleteAppRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getApp(
    _ request: Sinch_Conversationapi_App_V1_GetAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_GetAppRequest, Sinch_Conversationapi_Type_App>

  func listApps(
    _ request: Sinch_Conversationapi_App_V1_ListAppsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_ListAppsRequest, Sinch_Conversationapi_App_V1_ListAppsResponse>
}

extension Sinch_Conversationapi_App_V1_AppClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.app.v1.App"
  }

  /// Creates an app
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createApp(
    _ request: Sinch_Conversationapi_App_V1_CreateAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_CreateAppRequest, Sinch_Conversationapi_Type_App> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.app.v1.App/CreateApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAppInterceptors() ?? []
    )
  }

  /// Update an app
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateApp(
    _ request: Sinch_Conversationapi_App_V1_UpdateAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_UpdateAppRequest, Sinch_Conversationapi_Type_App> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.app.v1.App/UpdateApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAppInterceptors() ?? []
    )
  }

  /// Delete an app
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteApp(
    _ request: Sinch_Conversationapi_App_V1_DeleteAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_DeleteAppRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.app.v1.App/DeleteApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAppInterceptors() ?? []
    )
  }

  /// Get an app
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getApp(
    _ request: Sinch_Conversationapi_App_V1_GetAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_GetAppRequest, Sinch_Conversationapi_Type_App> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.app.v1.App/GetApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppInterceptors() ?? []
    )
  }

  /// List all apps for a given project
  ///
  /// - Parameters:
  ///   - request: Request to send to ListApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listApps(
    _ request: Sinch_Conversationapi_App_V1_ListAppsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_App_V1_ListAppsRequest, Sinch_Conversationapi_App_V1_ListAppsResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.app.v1.App/ListApps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAppsInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createApp'.
  func makeCreateAppInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_App_V1_CreateAppRequest, Sinch_Conversationapi_Type_App>]

  /// - Returns: Interceptors to use when invoking 'updateApp'.
  func makeUpdateAppInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_App_V1_UpdateAppRequest, Sinch_Conversationapi_Type_App>]

  /// - Returns: Interceptors to use when invoking 'deleteApp'.
  func makeDeleteAppInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_App_V1_DeleteAppRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getApp'.
  func makeGetAppInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_App_V1_GetAppRequest, Sinch_Conversationapi_Type_App>]

  /// - Returns: Interceptors to use when invoking 'listApps'.
  func makeListAppsInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_App_V1_ListAppsRequest, Sinch_Conversationapi_App_V1_ListAppsResponse>]
}

internal final class Sinch_Conversationapi_App_V1_AppClient: Sinch_Conversationapi_App_V1_AppClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.app.v1.App service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_App_V1_AppTestClient: Sinch_Conversationapi_App_V1_AppClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_App_V1_AppClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the CreateApp RPC. This must be called
  /// before calling 'createApp'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeCreateAppResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_CreateAppRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_App_V1_CreateAppRequest, Sinch_Conversationapi_Type_App> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.app.v1.App/CreateApp", requestHandler: requestHandler)
  }

  internal func enqueueCreateAppResponse(
    _ response: Sinch_Conversationapi_Type_App,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_CreateAppRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCreateAppResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'CreateApp'
  internal var hasCreateAppResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.app.v1.App/CreateApp")
  }

  /// Make a unary response for the UpdateApp RPC. This must be called
  /// before calling 'updateApp'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeUpdateAppResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_UpdateAppRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_App_V1_UpdateAppRequest, Sinch_Conversationapi_Type_App> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.app.v1.App/UpdateApp", requestHandler: requestHandler)
  }

  internal func enqueueUpdateAppResponse(
    _ response: Sinch_Conversationapi_Type_App,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_UpdateAppRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpdateAppResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateApp'
  internal var hasUpdateAppResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.app.v1.App/UpdateApp")
  }

  /// Make a unary response for the DeleteApp RPC. This must be called
  /// before calling 'deleteApp'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteAppResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_DeleteAppRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_App_V1_DeleteAppRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.app.v1.App/DeleteApp", requestHandler: requestHandler)
  }

  internal func enqueueDeleteAppResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_DeleteAppRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteAppResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteApp'
  internal var hasDeleteAppResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.app.v1.App/DeleteApp")
  }

  /// Make a unary response for the GetApp RPC. This must be called
  /// before calling 'getApp'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetAppResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_GetAppRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_App_V1_GetAppRequest, Sinch_Conversationapi_Type_App> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.app.v1.App/GetApp", requestHandler: requestHandler)
  }

  internal func enqueueGetAppResponse(
    _ response: Sinch_Conversationapi_Type_App,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_GetAppRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetAppResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetApp'
  internal var hasGetAppResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.app.v1.App/GetApp")
  }

  /// Make a unary response for the ListApps RPC. This must be called
  /// before calling 'listApps'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListAppsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_ListAppsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_App_V1_ListAppsRequest, Sinch_Conversationapi_App_V1_ListAppsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.app.v1.App/ListApps", requestHandler: requestHandler)
  }

  internal func enqueueListAppsResponse(
    _ response: Sinch_Conversationapi_App_V1_ListAppsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_App_V1_ListAppsRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListAppsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListApps'
  internal var hasListAppsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.app.v1.App/ListApps")
  }
}

