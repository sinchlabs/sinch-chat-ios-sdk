//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/optin/v1/optin_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Opt-In / Opt-Out API
///
/// Usage: instantiate `Sinch_Conversationapi_Optin_V1_OptInClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Optin_V1_OptInClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol? { get }

  func registerOptIn(
    _ request: Sinch_Conversationapi_Optin_V1_OptInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Optin_V1_OptInRequest, Sinch_Conversationapi_Optin_V1_OptInResponse>

  func registerOptOut(
    _ request: Sinch_Conversationapi_Optin_V1_OptOutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Optin_V1_OptOutRequest, Sinch_Conversationapi_Optin_V1_OptOutResponse>
}

extension Sinch_Conversationapi_Optin_V1_OptInClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.optin.v1.OptIn"
  }

  /// Register an opt-in
  ///
  /// This method is asynchronous - it returns immediately the
  /// requested OptIn registration with any defaults resolved.
  /// All changes of the actual opt-in status are then delivered as callbacks
  /// to registered webhooks with trigger OPT_IN. 
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterOptIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerOptIn(
    _ request: Sinch_Conversationapi_Optin_V1_OptInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Optin_V1_OptInRequest, Sinch_Conversationapi_Optin_V1_OptInResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptIn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterOptInInterceptors() ?? []
    )
  }

  /// Register an opt-out
  ///
  /// This method is asynchronous - it returns immediately the
  /// requested OptOut registration with any defaults resolved.
  /// All changes of the actual opt-out status are then delivered as callbacks
  /// to registered webhooks with trigger OPT_OUT. 
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterOptOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerOptOut(
    _ request: Sinch_Conversationapi_Optin_V1_OptOutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Optin_V1_OptOutRequest, Sinch_Conversationapi_Optin_V1_OptOutResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptOut",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterOptOutInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerOptIn'.
  func makeRegisterOptInInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Optin_V1_OptInRequest, Sinch_Conversationapi_Optin_V1_OptInResponse>]

  /// - Returns: Interceptors to use when invoking 'registerOptOut'.
  func makeRegisterOptOutInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Optin_V1_OptOutRequest, Sinch_Conversationapi_Optin_V1_OptOutResponse>]
}

internal final class Sinch_Conversationapi_Optin_V1_OptInClient: Sinch_Conversationapi_Optin_V1_OptInClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.optin.v1.OptIn service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Optin_V1_OptInTestClient: Sinch_Conversationapi_Optin_V1_OptInClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Optin_V1_OptInClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the RegisterOptIn RPC. This must be called
  /// before calling 'registerOptIn'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeRegisterOptInResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Optin_V1_OptInRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Optin_V1_OptInRequest, Sinch_Conversationapi_Optin_V1_OptInResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptIn", requestHandler: requestHandler)
  }

  internal func enqueueRegisterOptInResponse(
    _ response: Sinch_Conversationapi_Optin_V1_OptInResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Optin_V1_OptInRequest>) -> () = { _ in }
  )  {
    let stream = self.makeRegisterOptInResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RegisterOptIn'
  internal var hasRegisterOptInResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptIn")
  }

  /// Make a unary response for the RegisterOptOut RPC. This must be called
  /// before calling 'registerOptOut'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeRegisterOptOutResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Optin_V1_OptOutRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Optin_V1_OptOutRequest, Sinch_Conversationapi_Optin_V1_OptOutResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptOut", requestHandler: requestHandler)
  }

  internal func enqueueRegisterOptOutResponse(
    _ response: Sinch_Conversationapi_Optin_V1_OptOutResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Optin_V1_OptOutRequest>) -> () = { _ in }
  )  {
    let stream = self.makeRegisterOptOutResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'RegisterOptOut'
  internal var hasRegisterOptOutResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.optin.v1.OptIn/RegisterOptOut")
  }
}

