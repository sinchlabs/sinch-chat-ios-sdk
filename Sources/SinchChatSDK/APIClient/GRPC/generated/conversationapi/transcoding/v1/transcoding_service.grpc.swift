//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/transcoding/v1/transcoding_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The Transcoding API
///
/// Usage: instantiate `Sinch_Conversationapi_Transcoding_V1_TranscodingClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Transcoding_V1_TranscodingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol? { get }

  func transcodeMessage(
    _ request: Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest, Sinch_Conversationapi_Transcoding_V1_TranscodeMessageResponse>
}

extension Sinch_Conversationapi_Transcoding_V1_TranscodingClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.transcoding.v1.Transcoding"
  }

  /// Transcode a message
  ///
  /// Transcodes the message from the Conversation API format to the
  /// channel-specific formats for the requested channels. No message
  /// is sent to the contact. 
  ///
  /// - Parameters:
  ///   - request: Request to send to TranscodeMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transcodeMessage(
    _ request: Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest, Sinch_Conversationapi_Transcoding_V1_TranscodeMessageResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.transcoding.v1.Transcoding/TranscodeMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscodeMessageInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'transcodeMessage'.
  func makeTranscodeMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest, Sinch_Conversationapi_Transcoding_V1_TranscodeMessageResponse>]
}

internal final class Sinch_Conversationapi_Transcoding_V1_TranscodingClient: Sinch_Conversationapi_Transcoding_V1_TranscodingClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.transcoding.v1.Transcoding service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Transcoding_V1_TranscodingTestClient: Sinch_Conversationapi_Transcoding_V1_TranscodingClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Transcoding_V1_TranscodingClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the TranscodeMessage RPC. This must be called
  /// before calling 'transcodeMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeTranscodeMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest, Sinch_Conversationapi_Transcoding_V1_TranscodeMessageResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.transcoding.v1.Transcoding/TranscodeMessage", requestHandler: requestHandler)
  }

  internal func enqueueTranscodeMessageResponse(
    _ response: Sinch_Conversationapi_Transcoding_V1_TranscodeMessageResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Transcoding_V1_TranscodeMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeTranscodeMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TranscodeMessage'
  internal var hasTranscodeMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.transcoding.v1.Transcoding/TranscodeMessage")
  }
}

