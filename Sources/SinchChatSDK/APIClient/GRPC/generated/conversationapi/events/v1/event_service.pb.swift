// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/events/v1/event_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Conversationapi_Events_V1_SendEventRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The project ID.
  var projectID: String = String()

  /// Required. The ID of the app sending the event.
  var appID: String = String()

  /// Required. The recipient can be an existing contact or a channel identity
  /// When no contact for that project exists with the given channel identity
  /// a new contact is created automatically. 
  var recipient: Sinch_Conversationapi_Type_Recipient {
    get {return _recipient ?? Sinch_Conversationapi_Type_Recipient()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  /// Required. The event to send.
  var event: Sinch_Conversationapi_Type_AppEvent {
    get {return _event ?? Sinch_Conversationapi_Type_AppEvent()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  /// Optional. Overwrites the default callback url for delivery reports for this event
  ///The REST URL should be of the form: scheme://host[:port]/path
  /// where scheme is http or https.
  /// The gRPC URL should be of the form: dns://host[:port]
  /// (See: https://github.com/grpc/grpc/blob/master/doc/naming.md). 
  var callbackURL: String = String()

  /// Optional. Channel priority order that dictates on which channels the
  /// Conversation API should try to send the message on. The order provided
  /// here overrides any default. 
  var channelPriorityOrder: [Sinch_Conversationapi_Type_ConversationChannel] = []

  /// Optional. Eventual metadata that should be associated to the event.
  var eventMetadata: String = String()

  /// Optional. Define what queue the message should be placed in.
  /// Note that most messages should be placed in the default QUEUE_NORMAL_PRIORITY.
  /// QUEUE_HIGH_PRIORITY should only be used for messages that needs to be processed ASAP.
  /// Note that rate limits still apply to both queues.
  var queue: Sinch_Conversationapi_Type_MessageQueue = .normalPriority

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: Sinch_Conversationapi_Type_Recipient? = nil
  fileprivate var _event: Sinch_Conversationapi_Type_AppEvent? = nil
}

struct Sinch_Conversationapi_Events_V1_SendEventResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Event id.
  var eventID: String = String()

  /// Output only. Accepted timestamp.
  var acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acceptedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acceptedTime = newValue}
  }
  /// Returns true if `acceptedTime` has been explicitly set.
  var hasAcceptedTime: Bool {return self._acceptedTime != nil}
  /// Clears the value of `acceptedTime`. Subsequent reads from it will return its default value.
  mutating func clearAcceptedTime() {self._acceptedTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _acceptedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.events.v1"

extension Sinch_Conversationapi_Events_V1_SendEventRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendEventRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "app_id"),
    3: .same(proto: "recipient"),
    4: .same(proto: "event"),
    5: .standard(proto: "callback_url"),
    6: .standard(proto: "channel_priority_order"),
    7: .standard(proto: "event_metadata"),
    8: .same(proto: "queue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._recipient) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._event) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.callbackURL) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.channelPriorityOrder) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.eventMetadata) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.queue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 2)
    }
    try { if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.callbackURL.isEmpty {
      try visitor.visitSingularStringField(value: self.callbackURL, fieldNumber: 5)
    }
    if !self.channelPriorityOrder.isEmpty {
      try visitor.visitPackedEnumField(value: self.channelPriorityOrder, fieldNumber: 6)
    }
    if !self.eventMetadata.isEmpty {
      try visitor.visitSingularStringField(value: self.eventMetadata, fieldNumber: 7)
    }
    if self.queue != .normalPriority {
      try visitor.visitSingularEnumField(value: self.queue, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Events_V1_SendEventRequest, rhs: Sinch_Conversationapi_Events_V1_SendEventRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs._recipient != rhs._recipient {return false}
    if lhs._event != rhs._event {return false}
    if lhs.callbackURL != rhs.callbackURL {return false}
    if lhs.channelPriorityOrder != rhs.channelPriorityOrder {return false}
    if lhs.eventMetadata != rhs.eventMetadata {return false}
    if lhs.queue != rhs.queue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Events_V1_SendEventResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendEventResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .standard(proto: "accepted_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._acceptedTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 1)
    }
    try { if let v = self._acceptedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Events_V1_SendEventResponse, rhs: Sinch_Conversationapi_Events_V1_SendEventResponse) -> Bool {
    if lhs.eventID != rhs.eventID {return false}
    if lhs._acceptedTime != rhs._acceptedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
