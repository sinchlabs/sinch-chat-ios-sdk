// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/adapter/type/channel_reason.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Conversationapi_Adapter_Type_ReasonCode: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UNKNOWN is used if no other code can be used to describe the encountered error.
  case unknown // = 0

  /// Bad request - for validation failures.
  case badRequest // = 1

  /// Missing channel integration.
  case missingChannelIntegration // = 2

  /// The App was not found by the given app_id.
  case appIDNotFound // = 3

  /// The request cannot be verified.
  case unauthorized // = 4

  /// The app's queue is overloaded. The request should be retried by downstream.
  case queueOverloaded // = 5

  /// The channel credential was not found by the given channel_known_id.
  case channelKnownIDNotFound // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .badRequest
    case 2: self = .missingChannelIntegration
    case 3: self = .appIDNotFound
    case 4: self = .unauthorized
    case 5: self = .queueOverloaded
    case 6: self = .channelKnownIDNotFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .badRequest: return 1
    case .missingChannelIntegration: return 2
    case .appIDNotFound: return 3
    case .unauthorized: return 4
    case .queueOverloaded: return 5
    case .channelKnownIDNotFound: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Adapter_Type_ReasonCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Conversationapi_Adapter_Type_ReasonCode] = [
    .unknown,
    .badRequest,
    .missingChannelIntegration,
    .appIDNotFound,
    .unauthorized,
    .queueOverloaded,
    .channelKnownIDNotFound,
  ]
}

#endif  // swift(>=4.2)

///Reason proto for Channel API
struct Sinch_Conversationapi_Adapter_Type_ChannelReason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The code is a high-level classification of the error.
  /// UNKNOWN is used if no other code can be used to describe the encountered error. 
  var code: Sinch_Conversationapi_Adapter_Type_ReasonCode = .unknown

  /// Optional. If the error Reason was BAD_REQUEST, then the field violations are listed here.
  var fieldViolation: [Google_Rpc_BadRequest.FieldViolation] = []

  /// Optional. Description of the error.
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.adapter.type"

extension Sinch_Conversationapi_Adapter_Type_ReasonCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "BAD_REQUEST"),
    2: .same(proto: "MISSING_CHANNEL_INTEGRATION"),
    3: .same(proto: "APP_ID_NOT_FOUND"),
    4: .same(proto: "UNAUTHORIZED"),
    5: .same(proto: "QUEUE_OVERLOADED"),
    6: .same(proto: "CHANNEL_KNOWN_ID_NOT_FOUND"),
  ]
}

extension Sinch_Conversationapi_Adapter_Type_ChannelReason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChannelReason"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .standard(proto: "field_violation"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.fieldViolation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unknown {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.fieldViolation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fieldViolation, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Adapter_Type_ChannelReason, rhs: Sinch_Conversationapi_Adapter_Type_ChannelReason) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.fieldViolation != rhs.fieldViolation {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
