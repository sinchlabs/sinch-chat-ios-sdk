// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/adapter/v1beta/channel_credential_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The channel for which the credentials are to be obtained.
  var channel: Sinch_Conversationapi_Type_ConversationChannel = .channelUnspecified

  /// Required. The identifier after which the credential is to be obtained.
  var message: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest.OneOf_Message? = nil

  var appID: String {
    get {
      if case .appID(let v)? = message {return v}
      return String()
    }
    set {message = .appID(newValue)}
  }

  /// Additional identifier set by the channel when appId is unknown at the time of MO processing.
  var channelKnownID: String {
    get {
      if case .channelKnownID(let v)? = message {return v}
      return String()
    }
    set {message = .channelKnownID(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The identifier after which the credential is to be obtained.
  enum OneOf_Message: Equatable {
    case appID(String)
    /// Additional identifier set by the channel when appId is unknown at the time of MO processing.
    case channelKnownID(String)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest.OneOf_Message, rhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.appID, .appID): return {
        guard case .appID(let l) = lhs, case .appID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelKnownID, .channelKnownID): return {
        guard case .channelKnownID(let l) = lhs, case .channelKnownID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. AppId in which the channel credentials are used.
  var appID: String = String()

  /// Optional. Additional identifier set by the channel that will allow you
  /// to read the appropriate credentials at the moment when the appId is unknown. 
  var channelKnownID: String = String()

  /// Required. Obtained channel credential.
  var channelCredentials: Sinch_Conversationapi_Type_ConversationChannelCredential {
    get {return _channelCredentials ?? Sinch_Conversationapi_Type_ConversationChannelCredential()}
    set {_channelCredentials = newValue}
  }
  /// Returns true if `channelCredentials` has been explicitly set.
  var hasChannelCredentials: Bool {return self._channelCredentials != nil}
  /// Clears the value of `channelCredentials`. Subsequent reads from it will return its default value.
  mutating func clearChannelCredentials() {self._channelCredentials = nil}

  /// If the request was erroneous then the error is presented here.
  var error: Sinch_Conversationapi_Adapter_Type_ChannelReason {
    get {return _error ?? Sinch_Conversationapi_Adapter_Type_ChannelReason()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _channelCredentials: Sinch_Conversationapi_Type_ConversationChannelCredential? = nil
  fileprivate var _error: Sinch_Conversationapi_Adapter_Type_ChannelReason? = nil
}

struct Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. AppId for which the credential will be set.
  var appID: String = String()

  /// Optional. Additional identifier set by the channel that will allow you
  /// to read the appropriate credentials at the moment when the appId is unknown. 
  var channelKnownID: String = String()

  /// Required. The credentials to be saved
  var channelCredentials: Sinch_Conversationapi_Type_ConversationChannelCredential {
    get {return _channelCredentials ?? Sinch_Conversationapi_Type_ConversationChannelCredential()}
    set {_channelCredentials = newValue}
  }
  /// Returns true if `channelCredentials` has been explicitly set.
  var hasChannelCredentials: Bool {return self._channelCredentials != nil}
  /// Clears the value of `channelCredentials`. Subsequent reads from it will return its default value.
  mutating func clearChannelCredentials() {self._channelCredentials = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _channelCredentials: Sinch_Conversationapi_Type_ConversationChannelCredential? = nil
}

struct Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If the request was erroneous then the error is presented here.
  var error: Sinch_Conversationapi_Adapter_Type_ChannelReason {
    get {return _error ?? Sinch_Conversationapi_Adapter_Type_ChannelReason()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _error: Sinch_Conversationapi_Adapter_Type_ChannelReason? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.adapter.v1beta"

extension Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChannelCredentialRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "channel_known_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.channel) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.message != nil {try decoder.handleConflictingOneOf()}
          self.message = .appID(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.message != nil {try decoder.handleConflictingOneOf()}
          self.message = .channelKnownID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.channel != .channelUnspecified {
      try visitor.visitSingularEnumField(value: self.channel, fieldNumber: 1)
    }
    switch self.message {
    case .appID?: try {
      guard case .appID(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .channelKnownID?: try {
      guard case .channelKnownID(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest, rhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialRequest) -> Bool {
    if lhs.channel != rhs.channel {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChannelCredentialResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "channel_known_id"),
    3: .standard(proto: "channel_credentials"),
    4: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channelKnownID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._channelCredentials) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.channelKnownID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelKnownID, fieldNumber: 2)
    }
    try { if let v = self._channelCredentials {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialResponse, rhs: Sinch_Conversationapi_Adapter_V1beta_GetChannelCredentialResponse) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.channelKnownID != rhs.channelKnownID {return false}
    if lhs._channelCredentials != rhs._channelCredentials {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetChannelCredentialRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "channel_known_id"),
    3: .standard(proto: "channel_credentials"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channelKnownID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._channelCredentials) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.channelKnownID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelKnownID, fieldNumber: 2)
    }
    try { if let v = self._channelCredentials {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialRequest, rhs: Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialRequest) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.channelKnownID != rhs.channelKnownID {return false}
    if lhs._channelCredentials != rhs._channelCredentials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetChannelCredentialResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialResponse, rhs: Sinch_Conversationapi_Adapter_V1beta_SetChannelCredentialResponse) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
