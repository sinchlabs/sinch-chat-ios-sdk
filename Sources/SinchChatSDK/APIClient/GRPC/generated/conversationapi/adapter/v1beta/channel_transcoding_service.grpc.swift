//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/conversationapi/adapter/v1beta/channel_transcoding_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Defines service to get the transcoded format of a generic message
///
/// Usage: instantiate `Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol? { get }

  func transcodeChannelMessage(
    _ request: Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest, Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageResponse>
}

extension Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientProtocol {
  internal var serviceName: String {
    return "sinch.conversationapi.adapter.v1beta.ChannelTranscoding"
  }

  /// Unary call to TranscodeChannelMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to TranscodeChannelMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transcodeChannelMessage(
    _ request: Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest, Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageResponse> {
    return self.makeUnaryCall(
      path: "/sinch.conversationapi.adapter.v1beta.ChannelTranscoding/TranscodeChannelMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscodeChannelMessageInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'transcodeChannelMessage'.
  func makeTranscodeChannelMessageInterceptors() -> [ClientInterceptor<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest, Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageResponse>]
}

internal final class Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClient: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.conversationapi.adapter.v1beta.ChannelTranscoding service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingTestClient: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Conversationapi_Adapter_V1beta_ChannelTranscodingClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the TranscodeChannelMessage RPC. This must be called
  /// before calling 'transcodeChannelMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeTranscodeChannelMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest, Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.conversationapi.adapter.v1beta.ChannelTranscoding/TranscodeChannelMessage", requestHandler: requestHandler)
  }

  internal func enqueueTranscodeChannelMessageResponse(
    _ response: Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Conversationapi_Adapter_V1beta_TranscodeChannelMessageRequest>) -> () = { _ in }
  )  {
    let stream = self.makeTranscodeChannelMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'TranscodeChannelMessage'
  internal var hasTranscodeChannelMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.conversationapi.adapter.v1beta.ChannelTranscoding/TranscodeChannelMessage")
  }
}

