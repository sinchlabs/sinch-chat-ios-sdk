// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/conversation_channel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Channel Identifier 
enum Sinch_Conversationapi_Type_ConversationChannel: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case channelUnspecified // = 0
  case whatsapp // = 1
  case rcs // = 2
  case sms // = 3
  case messenger // = 4
  case viber // = 5
  case viberbm // = 6
  case mms // = 7
  case telegram // = 8
  case instagram // = 9
  case kakaotalk // = 10
  case nativeChannel // = 11
  case applebc // = 12
  case wechat // = 13
  case line // = 14
  case UNRECOGNIZED(Int)

  init() {
    self = .channelUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .channelUnspecified
    case 1: self = .whatsapp
    case 2: self = .rcs
    case 3: self = .sms
    case 4: self = .messenger
    case 5: self = .viber
    case 6: self = .viberbm
    case 7: self = .mms
    case 8: self = .telegram
    case 9: self = .instagram
    case 10: self = .kakaotalk
    case 11: self = .nativeChannel
    case 12: self = .applebc
    case 13: self = .wechat
    case 14: self = .line
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .channelUnspecified: return 0
    case .whatsapp: return 1
    case .rcs: return 2
    case .sms: return 3
    case .messenger: return 4
    case .viber: return 5
    case .viberbm: return 6
    case .mms: return 7
    case .telegram: return 8
    case .instagram: return 9
    case .kakaotalk: return 10
    case .nativeChannel: return 11
    case .applebc: return 12
    case .wechat: return 13
    case .line: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_ConversationChannel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Conversationapi_Type_ConversationChannel] = [
    .channelUnspecified,
    .whatsapp,
    .rcs,
    .sms,
    .messenger,
    .viber,
    .viberbm,
    .mms,
    .telegram,
    .instagram,
    .kakaotalk,
    .nativeChannel,
    .applebc,
    .wechat,
    .line,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_ConversationChannel: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Sinch_Conversationapi_Type_ConversationChannel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHANNEL_UNSPECIFIED"),
    1: .same(proto: "WHATSAPP"),
    2: .same(proto: "RCS"),
    3: .same(proto: "SMS"),
    4: .same(proto: "MESSENGER"),
    5: .same(proto: "VIBER"),
    6: .same(proto: "VIBERBM"),
    7: .same(proto: "MMS"),
    8: .same(proto: "TELEGRAM"),
    9: .same(proto: "INSTAGRAM"),
    10: .same(proto: "KAKAOTALK"),
    11: .same(proto: "NATIVE_CHANNEL"),
    12: .same(proto: "APPLEBC"),
    13: .same(proto: "WECHAT"),
    14: .same(proto: "LINE"),
  ]
}
