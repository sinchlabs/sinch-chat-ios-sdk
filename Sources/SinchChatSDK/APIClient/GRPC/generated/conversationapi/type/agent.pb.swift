// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/agent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Conversationapi_Type_AgentType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownAgentType // = 0

  /// Agent is a human
  case human // = 1

  /// Agent is a bot
  case bot // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownAgentType
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownAgentType
    case 1: self = .human
    case 3: self = .bot
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownAgentType: return 0
    case .human: return 1
    case .bot: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_AgentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sinch_Conversationapi_Type_AgentType] = [
    .unknownAgentType,
    .human,
    .bot,
  ]
}

#endif  // swift(>=4.2)

struct Sinch_Conversationapi_Type_Agent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name of the agent eg. `SinchBot` or `John Doe`
  var displayName: String = String()

  /// Required. Type of the Agent
  var type: Sinch_Conversationapi_Type_AgentType = .unknownAgentType

  /// Optional. Picture of the agent
  var pictureURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_AgentType: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_Agent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_AgentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_AGENT_TYPE"),
    1: .same(proto: "HUMAN"),
    3: .same(proto: "BOT"),
  ]
}

extension Sinch_Conversationapi_Type_Agent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Agent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "type"),
    3: .standard(proto: "picture_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pictureURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if self.type != .unknownAgentType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.pictureURL.isEmpty {
      try visitor.visitSingularStringField(value: self.pictureURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_Agent, rhs: Sinch_Conversationapi_Type_Agent) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.type != rhs.type {return false}
    if lhs.pictureURL != rhs.pictureURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
