// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/conversation_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Conversation Event
///
/// An event on a particular channel.
struct Sinch_Conversationapi_Type_ConversationEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The direction defines what is the source and
  /// what is the destination of the event. 
  var direction: Sinch_Conversationapi_Type_ConversationDirection = .undefinedDirection

  /// The content of the event.
  var event: Sinch_Conversationapi_Type_ConversationEvent.OneOf_Event? = nil

  var appEvent: Sinch_Conversationapi_Type_AppEvent {
    get {
      if case .appEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_AppEvent()
    }
    set {event = .appEvent(newValue)}
  }

  var contactEvent: Sinch_Conversationapi_Type_ContactEvent {
    get {
      if case .contactEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ContactEvent()
    }
    set {event = .contactEvent(newValue)}
  }

  /// Required. The ID of the contact.
  var contactID: String = String()

  /// Required. The channel and contact channel identity of the event.
  var channelIdentity: Sinch_Conversationapi_Type_ChannelIdentity {
    get {return _channelIdentity ?? Sinch_Conversationapi_Type_ChannelIdentity()}
    set {_channelIdentity = newValue}
  }
  /// Returns true if `channelIdentity` has been explicitly set.
  var hasChannelIdentity: Bool {return self._channelIdentity != nil}
  /// Clears the value of `channelIdentity`. Subsequent reads from it will return its default value.
  mutating func clearChannelIdentity() {self._channelIdentity = nil}

  /// Output only.
  var acceptTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acceptTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acceptTime = newValue}
  }
  /// Returns true if `acceptTime` has been explicitly set.
  var hasAcceptTime: Bool {return self._acceptTime != nil}
  /// Clears the value of `acceptTime`. Subsequent reads from it will return its default value.
  mutating func clearAcceptTime() {self._acceptTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The content of the event.
  enum OneOf_Event: Equatable {
    case appEvent(Sinch_Conversationapi_Type_AppEvent)
    case contactEvent(Sinch_Conversationapi_Type_ContactEvent)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ConversationEvent.OneOf_Event, rhs: Sinch_Conversationapi_Type_ConversationEvent.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.appEvent, .appEvent): return {
        guard case .appEvent(let l) = lhs, case .appEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactEvent, .contactEvent): return {
        guard case .contactEvent(let l) = lhs, case .contactEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _channelIdentity: Sinch_Conversationapi_Type_ChannelIdentity? = nil
  fileprivate var _acceptTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Message originating from an app
struct Sinch_Conversationapi_Type_AppEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Sinch_Conversationapi_Type_AppEvent.OneOf_Event? = nil

  var composingEvent: Sinch_Conversationapi_Type_ComposingEvent {
    get {
      if case .composingEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ComposingEvent()
    }
    set {event = .composingEvent(newValue)}
  }

  var composingEndEvent: Sinch_Conversationapi_Type_ComposingEndEvent {
    get {
      if case .composingEndEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ComposingEndEvent()
    }
    set {event = .composingEndEvent(newValue)}
  }

  var commentReplyEvent: Sinch_Conversationapi_Type_CommentReplyEvent {
    get {
      if case .commentReplyEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_CommentReplyEvent()
    }
    set {event = .commentReplyEvent(newValue)}
  }

  var agentJoinedEvent: Sinch_Conversationapi_Type_AgentJoinedEvent {
    get {
      if case .agentJoinedEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_AgentJoinedEvent()
    }
    set {event = .agentJoinedEvent(newValue)}
  }

  var agentLeftEvent: Sinch_Conversationapi_Type_AgentLeftEvent {
    get {
      if case .agentLeftEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_AgentLeftEvent()
    }
    set {event = .agentLeftEvent(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable {
    case composingEvent(Sinch_Conversationapi_Type_ComposingEvent)
    case composingEndEvent(Sinch_Conversationapi_Type_ComposingEndEvent)
    case commentReplyEvent(Sinch_Conversationapi_Type_CommentReplyEvent)
    case agentJoinedEvent(Sinch_Conversationapi_Type_AgentJoinedEvent)
    case agentLeftEvent(Sinch_Conversationapi_Type_AgentLeftEvent)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_AppEvent.OneOf_Event, rhs: Sinch_Conversationapi_Type_AppEvent.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.composingEvent, .composingEvent): return {
        guard case .composingEvent(let l) = lhs, case .composingEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.composingEndEvent, .composingEndEvent): return {
        guard case .composingEndEvent(let l) = lhs, case .composingEndEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.commentReplyEvent, .commentReplyEvent): return {
        guard case .commentReplyEvent(let l) = lhs, case .commentReplyEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentJoinedEvent, .agentJoinedEvent): return {
        guard case .agentJoinedEvent(let l) = lhs, case .agentJoinedEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.agentLeftEvent, .agentLeftEvent): return {
        guard case .agentLeftEvent(let l) = lhs, case .agentLeftEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Message originating from a contact
struct Sinch_Conversationapi_Type_ContactEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Sinch_Conversationapi_Type_ContactEvent.OneOf_Event? = nil

  var composingEvent: Sinch_Conversationapi_Type_ComposingEvent {
    get {
      if case .composingEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ComposingEvent()
    }
    set {event = .composingEvent(newValue)}
  }

  var composingEndEvent: Sinch_Conversationapi_Type_ComposingEndEvent {
    get {
      if case .composingEndEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ComposingEndEvent()
    }
    set {event = .composingEndEvent(newValue)}
  }

  var conversationDeletedEvent: Sinch_Conversationapi_Type_ConversationDeletedEvent {
    get {
      if case .conversationDeletedEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_ConversationDeletedEvent()
    }
    set {event = .conversationDeletedEvent(newValue)}
  }

  var commentEvent: Sinch_Conversationapi_Type_CommentEvent {
    get {
      if case .commentEvent(let v)? = event {return v}
      return Sinch_Conversationapi_Type_CommentEvent()
    }
    set {event = .commentEvent(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable {
    case composingEvent(Sinch_Conversationapi_Type_ComposingEvent)
    case composingEndEvent(Sinch_Conversationapi_Type_ComposingEndEvent)
    case conversationDeletedEvent(Sinch_Conversationapi_Type_ConversationDeletedEvent)
    case commentEvent(Sinch_Conversationapi_Type_CommentEvent)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ContactEvent.OneOf_Event, rhs: Sinch_Conversationapi_Type_ContactEvent.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.composingEvent, .composingEvent): return {
        guard case .composingEvent(let l) = lhs, case .composingEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.composingEndEvent, .composingEndEvent): return {
        guard case .composingEndEvent(let l) = lhs, case .composingEndEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationDeletedEvent, .conversationDeletedEvent): return {
        guard case .conversationDeletedEvent(let l) = lhs, case .conversationDeletedEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.commentEvent, .commentEvent): return {
        guard case .commentEvent(let l) = lhs, case .commentEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// The user or the app started to type a message
struct Sinch_Conversationapi_Type_ComposingEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The user or the app cleared the message they were entering
struct Sinch_Conversationapi_Type_ComposingEndEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The user deleted the conversation and won't receive more messages until an MO message
struct Sinch_Conversationapi_Type_ConversationDeletedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The user sent a comment outside of the main conversation context
struct Sinch_Conversationapi_Type_CommentEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. An identifier for the comment.
  var id: String = String()

  /// Required. The text of the comment.
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The app replies to a comment sent by the user
struct Sinch_Conversationapi_Type_CommentReplyEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The text of the comment reply.
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Notification about agent/sender joining to the conversation
struct Sinch_Conversationapi_Type_AgentJoinedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var agent: Sinch_Conversationapi_Type_Agent {
    get {return _agent ?? Sinch_Conversationapi_Type_Agent()}
    set {_agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  var hasAgent: Bool {return self._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  mutating func clearAgent() {self._agent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _agent: Sinch_Conversationapi_Type_Agent? = nil
}

/// Notification about agent/sender leaving the conversation
struct Sinch_Conversationapi_Type_AgentLeftEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var agent: Sinch_Conversationapi_Type_Agent {
    get {return _agent ?? Sinch_Conversationapi_Type_Agent()}
    set {_agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  var hasAgent: Bool {return self._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  mutating func clearAgent() {self._agent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _agent: Sinch_Conversationapi_Type_Agent? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_ConversationEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ConversationEvent.OneOf_Event: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AppEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AppEvent.OneOf_Event: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ContactEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ContactEvent.OneOf_Event: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ComposingEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ComposingEndEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ConversationDeletedEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CommentEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CommentReplyEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AgentJoinedEvent: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AgentLeftEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_ConversationEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConversationEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .standard(proto: "app_event"),
    3: .standard(proto: "contact_event"),
    4: .standard(proto: "contact_id"),
    5: .standard(proto: "channel_identity"),
    6: .standard(proto: "accept_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_AppEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .appEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .appEvent(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_ContactEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .contactEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .contactEvent(v)
        }
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contactID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._channelIdentity) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._acceptTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.direction != .undefinedDirection {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 1)
    }
    switch self.event {
    case .appEvent?: try {
      guard case .appEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .contactEvent?: try {
      guard case .contactEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.contactID.isEmpty {
      try visitor.visitSingularStringField(value: self.contactID, fieldNumber: 4)
    }
    try { if let v = self._channelIdentity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._acceptTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ConversationEvent, rhs: Sinch_Conversationapi_Type_ConversationEvent) -> Bool {
    if lhs.direction != rhs.direction {return false}
    if lhs.event != rhs.event {return false}
    if lhs.contactID != rhs.contactID {return false}
    if lhs._channelIdentity != rhs._channelIdentity {return false}
    if lhs._acceptTime != rhs._acceptTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_AppEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "composing_event"),
    2: .standard(proto: "composing_end_event"),
    3: .standard(proto: "comment_reply_event"),
    4: .standard(proto: "agent_joined_event"),
    5: .standard(proto: "agent_left_event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_ComposingEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .composingEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .composingEvent(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_ComposingEndEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .composingEndEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .composingEndEvent(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_CommentReplyEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .commentReplyEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .commentReplyEvent(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_AgentJoinedEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .agentJoinedEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .agentJoinedEvent(v)
        }
      }()
      case 5: try {
        var v: Sinch_Conversationapi_Type_AgentLeftEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .agentLeftEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .agentLeftEvent(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.event {
    case .composingEvent?: try {
      guard case .composingEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .composingEndEvent?: try {
      guard case .composingEndEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .commentReplyEvent?: try {
      guard case .commentReplyEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .agentJoinedEvent?: try {
      guard case .agentJoinedEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .agentLeftEvent?: try {
      guard case .agentLeftEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_AppEvent, rhs: Sinch_Conversationapi_Type_AppEvent) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ContactEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "composing_event"),
    2: .standard(proto: "composing_end_event"),
    3: .standard(proto: "conversation_deleted_event"),
    4: .standard(proto: "comment_event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_ComposingEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .composingEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .composingEvent(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_ComposingEndEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .composingEndEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .composingEndEvent(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_ConversationDeletedEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .conversationDeletedEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .conversationDeletedEvent(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_CommentEvent?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .commentEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .commentEvent(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.event {
    case .composingEvent?: try {
      guard case .composingEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .composingEndEvent?: try {
      guard case .composingEndEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .conversationDeletedEvent?: try {
      guard case .conversationDeletedEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .commentEvent?: try {
      guard case .commentEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ContactEvent, rhs: Sinch_Conversationapi_Type_ContactEvent) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ComposingEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComposingEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ComposingEvent, rhs: Sinch_Conversationapi_Type_ComposingEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ComposingEndEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComposingEndEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ComposingEndEvent, rhs: Sinch_Conversationapi_Type_ComposingEndEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ConversationDeletedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConversationDeletedEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ConversationDeletedEvent, rhs: Sinch_Conversationapi_Type_ConversationDeletedEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_CommentEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommentEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CommentEvent, rhs: Sinch_Conversationapi_Type_CommentEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_CommentReplyEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommentReplyEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CommentReplyEvent, rhs: Sinch_Conversationapi_Type_CommentReplyEvent) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_AgentJoinedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AgentJoinedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "agent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._agent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._agent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_AgentJoinedEvent, rhs: Sinch_Conversationapi_Type_AgentJoinedEvent) -> Bool {
    if lhs._agent != rhs._agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_AgentLeftEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AgentLeftEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "agent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._agent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._agent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_AgentLeftEvent, rhs: Sinch_Conversationapi_Type_AgentLeftEvent) -> Bool {
    if lhs._agent != rhs._agent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
