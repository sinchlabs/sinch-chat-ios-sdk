// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/channel_properties.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Possible keys for the channel_properties map
/// The entries have the following format: <conversation channel>_<property name>. 
enum Sinch_Conversationapi_Type_ChannelPropertyKeys: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case propertyKeyUndefined // = 0

  /// Messenger messaging type.
  /// For more information visit:
  /// https://developers.facebook.com/docs/messenger-platform/send-messages/#messaging_types
  /// Defaults to MESSAGE_TAG if MESSENGER_MESSAGE_TAG is set. 
  case messengerMessagingType // = 1

  /// Messenger message tag. Enables sending specific updates
  /// to users outside the standard messaging window.
  /// For more information including a list of possible values visit:
  /// https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags
  /// There is no default value for this property. 
  case messengerMessageTag // = 2

  /// Messenger push notification type.
  /// Possible values are REGULAR (sound/vibration),
  /// SILENT_PUSH (on-screen notification only) and
  /// NO_PUSH (no notification).
  /// The default is REGULAR. 
  case messengerNotificationType // = 3

  /// Viber Bot sender’s name to display.
  /// Max 28 characters. 
  case viberSenderName // = 4

  /// Viber Bot sender’s avatar URL.
  /// Avatar size should be no more than 100 kb.
  /// Recommended 720x720. 
  case viberSenderAvatar // = 5

  /// Whether this is flash SMS message.
  /// Flash SMS messages are shown on screen without user interaction
  /// while not saving the message to the inbox.
  /// Possible values are true and false.
  /// The default is false. 
  case smsFlashMessage // = 6

  /// MMS sender longnumber or shortcode 
  case mmsSender // = 7

  /// To enable/disable link preview in Telegram message.
  /// Possible values: true and false.
  /// This property does not have default value.
  case telegramDisableLinkPreview // = 8

  /// SMS sender/originator. Optional on SMS channel.
  /// If not populated the default originator associated
  /// to your Sinch SMS account will be used. 
  case smsSender // = 9

  /// Instagram message tag.
  /// Enables sending messages outside of the standard messaging window.
  /// Possible values: HUMAN_AGENT (the message was sent by a human agent)
  /// There is no default value for this property. 
  case instagramMessageTag // = 10

  /// Whether to enforce strict media validation for MMS. Setting this
  /// to true will ensure that the media renders in the best possible
  /// way on different operators and devices. Media non conformant to
  /// best practices will result in media message being rejected. The
  /// default value is false. Validation follows the guidelines from
  /// https://developers.sinch.com/docs/mms-bestpractices 
  case mmsStrictValidation // = 11

  /// KakaoTalk flag for Alimtalk authentication template messages.
  /// These messages are sent with higher priority and have shorter delivery time.
  /// Pre-requisite: the interpolated template message should contain one of the
  /// following words: auth, password, verif, にんしょう, 認証, 비밀번호, 인증
  /// Possible values: true or false. Default is false. 
  case kakaotalkAuthentication // = 12

  /// If LINE video message comes with a trackingId parameter, the video viewing
  /// complete event occurs when the user finishes watching the video
  /// Possible values: Half-width alphanumeric string
  /// Max character limit: 100 chars
  /// This property does not have default value.
  case lineVideoTrackingID // = 13

  /// SMS max number of message parts. If text message must be delivered as multiple SMS messages
  ///(because text length exceed single SMS message limit) this property defines how many parts
  ///maximum the Customer allows. 
  case smsMaxNumberOfMessageParts // = 14

  /// Defines if message should be checked for required split before sending. 
  case splitEnabled // = 15

  /// Defines if Apple Business Messages message should be encoded as RSA type 
  case applebcRsaEnabled // = 16

  /// Messenger notification messages token. Allows to send notification messages for users that opted in 
  case messengerNotificationMessagesToken // = 17
  case UNRECOGNIZED(Int)

  init() {
    self = .propertyKeyUndefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .propertyKeyUndefined
    case 1: self = .messengerMessagingType
    case 2: self = .messengerMessageTag
    case 3: self = .messengerNotificationType
    case 4: self = .viberSenderName
    case 5: self = .viberSenderAvatar
    case 6: self = .smsFlashMessage
    case 7: self = .mmsSender
    case 8: self = .telegramDisableLinkPreview
    case 9: self = .smsSender
    case 10: self = .instagramMessageTag
    case 11: self = .mmsStrictValidation
    case 12: self = .kakaotalkAuthentication
    case 13: self = .lineVideoTrackingID
    case 14: self = .smsMaxNumberOfMessageParts
    case 15: self = .splitEnabled
    case 16: self = .applebcRsaEnabled
    case 17: self = .messengerNotificationMessagesToken
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .propertyKeyUndefined: return 0
    case .messengerMessagingType: return 1
    case .messengerMessageTag: return 2
    case .messengerNotificationType: return 3
    case .viberSenderName: return 4
    case .viberSenderAvatar: return 5
    case .smsFlashMessage: return 6
    case .mmsSender: return 7
    case .telegramDisableLinkPreview: return 8
    case .smsSender: return 9
    case .instagramMessageTag: return 10
    case .mmsStrictValidation: return 11
    case .kakaotalkAuthentication: return 12
    case .lineVideoTrackingID: return 13
    case .smsMaxNumberOfMessageParts: return 14
    case .splitEnabled: return 15
    case .applebcRsaEnabled: return 16
    case .messengerNotificationMessagesToken: return 17
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_ChannelPropertyKeys: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sinch_Conversationapi_Type_ChannelPropertyKeys] = [
    .propertyKeyUndefined,
    .messengerMessagingType,
    .messengerMessageTag,
    .messengerNotificationType,
    .viberSenderName,
    .viberSenderAvatar,
    .smsFlashMessage,
    .mmsSender,
    .telegramDisableLinkPreview,
    .smsSender,
    .instagramMessageTag,
    .mmsStrictValidation,
    .kakaotalkAuthentication,
    .lineVideoTrackingID,
    .smsMaxNumberOfMessageParts,
    .splitEnabled,
    .applebcRsaEnabled,
    .messengerNotificationMessagesToken,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_ChannelPropertyKeys: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Sinch_Conversationapi_Type_ChannelPropertyKeys: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPERTY_KEY_UNDEFINED"),
    1: .same(proto: "MESSENGER_MESSAGING_TYPE"),
    2: .same(proto: "MESSENGER_MESSAGE_TAG"),
    3: .same(proto: "MESSENGER_NOTIFICATION_TYPE"),
    4: .same(proto: "VIBER_SENDER_NAME"),
    5: .same(proto: "VIBER_SENDER_AVATAR"),
    6: .same(proto: "SMS_FLASH_MESSAGE"),
    7: .same(proto: "MMS_SENDER"),
    8: .same(proto: "TELEGRAM_DISABLE_LINK_PREVIEW"),
    9: .same(proto: "SMS_SENDER"),
    10: .same(proto: "INSTAGRAM_MESSAGE_TAG"),
    11: .same(proto: "MMS_STRICT_VALIDATION"),
    12: .same(proto: "KAKAOTALK_AUTHENTICATION"),
    13: .same(proto: "LINE_VIDEO_TRACKING_ID"),
    14: .same(proto: "SMS_MAX_NUMBER_OF_MESSAGE_PARTS"),
    15: .same(proto: "SPLIT_ENABLED"),
    16: .same(proto: "APPLEBC_RSA_ENABLED"),
    17: .same(proto: "MESSENGER_NOTIFICATION_MESSAGES_TOKEN"),
  ]
}
