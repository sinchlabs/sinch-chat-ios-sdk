// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/opt_out_notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Conversationapi_Type_OptOutStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case optOutSucceeded // = 1
  case optOutFailed // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .optOutSucceeded
    case 2: self = .optOutFailed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .optOutSucceeded: return 1
    case .optOutFailed: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_OptOutStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Conversationapi_Type_OptOutStatus] = [
    .unspecified,
    .optOutSucceeded,
    .optOutFailed,
  ]
}

#endif  // swift(>=4.2)

struct Sinch_Conversationapi_Type_OptOutNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The contact for the channel identities.
  var contactID: String = String()

  /// Required. The channel of the opt-out.
  var channel: Sinch_Conversationapi_Type_ConversationChannel = .channelUnspecified

  /// Required. The channel identity e.g., a phone number for SMS, WhatsApp and Viber Business.
  var identity: String = String()

  /// Required. Status of the opt-out registration.
  var status: Sinch_Conversationapi_Type_OptOutStatus = .unspecified

  /// Optional. It is set in case of errors.
  var errorDetails: Sinch_Conversationapi_Type_OptOutErrorDetails {
    get {return _errorDetails ?? Sinch_Conversationapi_Type_OptOutErrorDetails()}
    set {_errorDetails = newValue}
  }
  /// Returns true if `errorDetails` has been explicitly set.
  var hasErrorDetails: Bool {return self._errorDetails != nil}
  /// Clears the value of `errorDetails`. Subsequent reads from it will return its default value.
  mutating func clearErrorDetails() {self._errorDetails = nil}

  /// Output only. ID generated when submitting the opt out request.
  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _errorDetails: Sinch_Conversationapi_Type_OptOutErrorDetails? = nil
}

struct Sinch_Conversationapi_Type_OptOutErrorDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Human-readable error description.
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_OptOutStatus: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_OptOutNotification: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_OptOutErrorDetails: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_OptOutStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPT_OUT_STATUS_UNSPECIFIED"),
    1: .same(proto: "OPT_OUT_SUCCEEDED"),
    2: .same(proto: "OPT_OUT_FAILED"),
  ]
}

extension Sinch_Conversationapi_Type_OptOutNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OptOutNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contact_id"),
    2: .same(proto: "channel"),
    3: .same(proto: "identity"),
    4: .same(proto: "status"),
    5: .standard(proto: "error_details"),
    6: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contactID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._errorDetails) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contactID.isEmpty {
      try visitor.visitSingularStringField(value: self.contactID, fieldNumber: 1)
    }
    if self.channel != .channelUnspecified {
      try visitor.visitSingularEnumField(value: self.channel, fieldNumber: 2)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 3)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try { if let v = self._errorDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_OptOutNotification, rhs: Sinch_Conversationapi_Type_OptOutNotification) -> Bool {
    if lhs.contactID != rhs.contactID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.status != rhs.status {return false}
    if lhs._errorDetails != rhs._errorDetails {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_OptOutErrorDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OptOutErrorDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_OptOutErrorDetails, rhs: Sinch_Conversationapi_Type_OptOutErrorDetails) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
