// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/conversation_notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Conversationapi_Type_ConversationNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var notification: Sinch_Conversationapi_Type_ConversationNotification.OneOf_Notification? = nil

  var conversationStartNotification: Sinch_Conversationapi_Type_ConversationStartNotification {
    get {
      if case .conversationStartNotification(let v)? = notification {return v}
      return Sinch_Conversationapi_Type_ConversationStartNotification()
    }
    set {notification = .conversationStartNotification(newValue)}
  }

  var conversationStopNotification: Sinch_Conversationapi_Type_ConversationStopNotification {
    get {
      if case .conversationStopNotification(let v)? = notification {return v}
      return Sinch_Conversationapi_Type_ConversationStopNotification()
    }
    set {notification = .conversationStopNotification(newValue)}
  }

  var conversationDeleteNotification: Sinch_Conversationapi_Type_ConversationDeleteNotification {
    get {
      if case .conversationDeleteNotification(let v)? = notification {return v}
      return Sinch_Conversationapi_Type_ConversationDeleteNotification()
    }
    set {notification = .conversationDeleteNotification(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Notification: Equatable {
    case conversationStartNotification(Sinch_Conversationapi_Type_ConversationStartNotification)
    case conversationStopNotification(Sinch_Conversationapi_Type_ConversationStopNotification)
    case conversationDeleteNotification(Sinch_Conversationapi_Type_ConversationDeleteNotification)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ConversationNotification.OneOf_Notification, rhs: Sinch_Conversationapi_Type_ConversationNotification.OneOf_Notification) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.conversationStartNotification, .conversationStartNotification): return {
        guard case .conversationStartNotification(let l) = lhs, case .conversationStartNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationStopNotification, .conversationStopNotification): return {
        guard case .conversationStopNotification(let l) = lhs, case .conversationStopNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationDeleteNotification, .conversationDeleteNotification): return {
        guard case .conversationDeleteNotification(let l) = lhs, case .conversationDeleteNotification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_ConversationNotification: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ConversationNotification.OneOf_Notification: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_ConversationNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConversationNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_start_notification"),
    2: .standard(proto: "conversation_stop_notification"),
    3: .standard(proto: "conversation_delete_notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_ConversationStartNotification?
        var hadOneofValue = false
        if let current = self.notification {
          hadOneofValue = true
          if case .conversationStartNotification(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.notification = .conversationStartNotification(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_ConversationStopNotification?
        var hadOneofValue = false
        if let current = self.notification {
          hadOneofValue = true
          if case .conversationStopNotification(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.notification = .conversationStopNotification(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_ConversationDeleteNotification?
        var hadOneofValue = false
        if let current = self.notification {
          hadOneofValue = true
          if case .conversationDeleteNotification(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.notification = .conversationDeleteNotification(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.notification {
    case .conversationStartNotification?: try {
      guard case .conversationStartNotification(let v)? = self.notification else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .conversationStopNotification?: try {
      guard case .conversationStopNotification(let v)? = self.notification else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .conversationDeleteNotification?: try {
      guard case .conversationDeleteNotification(let v)? = self.notification else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ConversationNotification, rhs: Sinch_Conversationapi_Type_ConversationNotification) -> Bool {
    if lhs.notification != rhs.notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
