// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/capability_notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Conversationapi_Type_CapabilityStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// The channel capability for the identity is unknown.
  case capabilityUnknown // = 0

  /// The specified identity supports all the features of the channel.
  case capabilityFull // = 1

  /// The specified identity supports a subset of the channel features.
  case capabilityPartial // = 2

  /// The specified identity has no capability on the channel.
  case noCapability // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .capabilityUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .capabilityUnknown
    case 1: self = .capabilityFull
    case 2: self = .capabilityPartial
    case 3: self = .noCapability
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .capabilityUnknown: return 0
    case .capabilityFull: return 1
    case .capabilityPartial: return 2
    case .noCapability: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_CapabilityStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sinch_Conversationapi_Type_CapabilityStatus] = [
    .capabilityUnknown,
    .capabilityFull,
    .capabilityPartial,
    .noCapability,
  ]
}

#endif  // swift(>=4.2)

///Represents an explicit Capability result for specific channel.
struct Sinch_Conversationapi_Type_CapabilityNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The contact for the channel identities.
  var contactID: String = String()

  /// Optional. The channel identity e.g., a phone number for SMS, WhatsApp and Viber Business.
  var identity: String = String()

  /// Optional. The channel for which the capability lookup was done towards.
  var channel: Sinch_Conversationapi_Type_ConversationChannel = .channelUnspecified

  /// Required. Status indicating the recipient's capability on the channel.
  var capabilityStatus: Sinch_Conversationapi_Type_CapabilityStatus = .capabilityUnknown

  /// Optional. A reason shall be present if the capability check failed.
  var reason: Sinch_Conversationapi_Type_Reason {
    get {return _reason ?? Sinch_Conversationapi_Type_Reason()}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  /// Optional. List of channel-specific capabilities reported by the channel.
  var channelCapabilities: [String] = []

  /// Output only. ID generated when submitting the capability request.
  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reason: Sinch_Conversationapi_Type_Reason? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_CapabilityStatus: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CapabilityNotification: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_CapabilityStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAPABILITY_UNKNOWN"),
    1: .same(proto: "CAPABILITY_FULL"),
    2: .same(proto: "CAPABILITY_PARTIAL"),
    3: .same(proto: "NO_CAPABILITY"),
  ]
}

extension Sinch_Conversationapi_Type_CapabilityNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CapabilityNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contact_id"),
    2: .same(proto: "identity"),
    3: .same(proto: "channel"),
    4: .standard(proto: "capability_status"),
    5: .same(proto: "reason"),
    6: .standard(proto: "channel_capabilities"),
    7: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contactID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.channel) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.capabilityStatus) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._reason) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.channelCapabilities) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contactID.isEmpty {
      try visitor.visitSingularStringField(value: self.contactID, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 2)
    }
    if self.channel != .channelUnspecified {
      try visitor.visitSingularEnumField(value: self.channel, fieldNumber: 3)
    }
    if self.capabilityStatus != .capabilityUnknown {
      try visitor.visitSingularEnumField(value: self.capabilityStatus, fieldNumber: 4)
    }
    try { if let v = self._reason {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.channelCapabilities.isEmpty {
      try visitor.visitRepeatedStringField(value: self.channelCapabilities, fieldNumber: 6)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CapabilityNotification, rhs: Sinch_Conversationapi_Type_CapabilityNotification) -> Bool {
    if lhs.contactID != rhs.contactID {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.capabilityStatus != rhs.capabilityStatus {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs.channelCapabilities != rhs.channelCapabilities {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
