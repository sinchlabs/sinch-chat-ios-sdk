// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/conversation_message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Conversationapi_Type_ConversationDirection: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefinedDirection // = 0
  case toApp // = 1
  case toContact // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .undefinedDirection
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefinedDirection
    case 1: self = .toApp
    case 2: self = .toContact
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefinedDirection: return 0
    case .toApp: return 1
    case .toContact: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_ConversationDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sinch_Conversationapi_Type_ConversationDirection] = [
    .undefinedDirection,
    .toApp,
    .toContact,
  ]
}

#endif  // swift(>=4.2)

enum Sinch_Conversationapi_Type_CardHeight: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecifiedHeight // = 0
  case short // = 1
  case medium // = 2
  case tall // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecifiedHeight
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedHeight
    case 1: self = .short
    case 2: self = .medium
    case 3: self = .tall
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecifiedHeight: return 0
    case .short: return 1
    case .medium: return 2
    case .tall: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_CardHeight: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sinch_Conversationapi_Type_CardHeight] = [
    .unspecifiedHeight,
    .short,
    .medium,
    .tall,
  ]
}

#endif  // swift(>=4.2)

/// Conversation Message
///
/// A message on a particular channel.
struct Sinch_Conversationapi_Type_ConversationMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The ID of the message.
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// The direction defines what is the source and
  /// what is the destination of the message. 
  var direction: Sinch_Conversationapi_Type_ConversationDirection {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  /// The content of the message.
  var message: OneOf_Message? {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var appMessage: Sinch_Conversationapi_Type_AppMessage {
    get {
      if case .appMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_AppMessage()
    }
    set {_uniqueStorage()._message = .appMessage(newValue)}
  }

  var contactMessage: Sinch_Conversationapi_Type_ContactMessage {
    get {
      if case .contactMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_ContactMessage()
    }
    set {_uniqueStorage()._message = .contactMessage(newValue)}
  }

  /// Required. The channel and contact channel identity of the message.
  var channelIdentity: Sinch_Conversationapi_Type_ChannelIdentity {
    get {return _storage._channelIdentity ?? Sinch_Conversationapi_Type_ChannelIdentity()}
    set {_uniqueStorage()._channelIdentity = newValue}
  }
  /// Returns true if `channelIdentity` has been explicitly set.
  var hasChannelIdentity: Bool {return _storage._channelIdentity != nil}
  /// Clears the value of `channelIdentity`. Subsequent reads from it will return its default value.
  mutating func clearChannelIdentity() {_uniqueStorage()._channelIdentity = nil}

  /// Optional. The ID of the conversation. Will not be present for messages sent in Dispatch Mode.
  var conversationID: String {
    get {return _storage._conversationID}
    set {_uniqueStorage()._conversationID = newValue}
  }

  /// Optional. The ID of the contact. Will not be present for messages sent in Dispatch Mode.
  var contactID: String {
    get {return _storage._contactID}
    set {_uniqueStorage()._contactID = newValue}
  }

  /// Optional. Metadata associated with the contact.
  /// Up to 1024 characters long. 
  var metadata: String {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  /// Output only.
  var acceptTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._acceptTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._acceptTime = newValue}
  }
  /// Returns true if `acceptTime` has been explicitly set.
  var hasAcceptTime: Bool {return _storage._acceptTime != nil}
  /// Clears the value of `acceptTime`. Subsequent reads from it will return its default value.
  mutating func clearAcceptTime() {_uniqueStorage()._acceptTime = nil}

  /// Optional. For Contact Messages the sender ID that the contact
  /// sent the message to. For App Messages the sender that was
  /// used to send the message, if applicable.
  var senderID: String {
    get {return _storage._senderID}
    set {_uniqueStorage()._senderID = newValue}
  }

  /// Output only. The processing mode.
  var processingMode: Sinch_Conversationapi_Type_ProcessingMode {
    get {return _storage._processingMode}
    set {_uniqueStorage()._processingMode = newValue}
  }

  /// Output only. Flag if the message was injected
  var injected: Bool {
    get {return _storage._injected}
    set {_uniqueStorage()._injected = newValue}
  }

  /// Required. The status of the message, eventTime of the status and reason if status is failed
  var messageStatus: Sinch_Conversationapi_Type_MessageStatus {
    get {return _storage._messageStatus ?? Sinch_Conversationapi_Type_MessageStatus()}
    set {_uniqueStorage()._messageStatus = newValue}
  }
  /// Returns true if `messageStatus` has been explicitly set.
  var hasMessageStatus: Bool {return _storage._messageStatus != nil}
  /// Clears the value of `messageStatus`. Subsequent reads from it will return its default value.
  mutating func clearMessageStatus() {_uniqueStorage()._messageStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The content of the message.
  enum OneOf_Message: Equatable {
    case appMessage(Sinch_Conversationapi_Type_AppMessage)
    case contactMessage(Sinch_Conversationapi_Type_ContactMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ConversationMessage.OneOf_Message, rhs: Sinch_Conversationapi_Type_ConversationMessage.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.appMessage, .appMessage): return {
        guard case .appMessage(let l) = lhs, case .appMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactMessage, .contactMessage): return {
        guard case .contactMessage(let l) = lhs, case .contactMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Message originating from an app
struct Sinch_Conversationapi_Type_AppMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Channel specific messages, overriding any transcoding.
  /// The key in the map must point to a valid conversation channel as
  /// defined by the enum ConversationChannel. 
  var explicitChannelMessage: Dictionary<String,String> {
    get {return _storage._explicitChannelMessage}
    set {_uniqueStorage()._explicitChannelMessage = newValue}
  }

  /// The content of the message.
  /// One of TextMessage, MediaMessage,
  /// TemplateMessage, ChoiceMessage,
  /// CardMessage, CarouselMessage, 
  /// LocationMessage, ContactInfoMessage
  /// or ListMessage. 
  var message: OneOf_Message? {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  /// A message containing only text.
  var textMessage: Sinch_Conversationapi_Type_TextMessage {
    get {
      if case .textMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_TextMessage()
    }
    set {_uniqueStorage()._message = .textMessage(newValue)}
  }

  /// A message containing media such as images, GIFs, and video.
  var mediaMessage: Sinch_Conversationapi_Type_MediaMessage {
    get {
      if case .mediaMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_MediaMessage()
    }
    set {_uniqueStorage()._message = .mediaMessage(newValue)}
  }

  /// A message with predefined template.
  /// Requires an existing template. 
  var templateMessage: Sinch_Conversationapi_Type_TemplateMessage {
    get {
      if case .templateMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_TemplateMessage()
    }
    set {_uniqueStorage()._message = .templateMessage(newValue)}
  }

  /// A message containing a "choice"/"action" and description.
  /// A choice message is transcoded as a button in Messenger and RCS
  /// and as a bullet point in SMS and WhatsApp. 
  var choiceMessage: Sinch_Conversationapi_Type_ChoiceMessage {
    get {
      if case .choiceMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_ChoiceMessage()
    }
    set {_uniqueStorage()._message = .choiceMessage(newValue)}
  }

  /// A rich message which consists of text and description with image or video.
  /// It can also contain a set of "choices" ("actions"). 
  var cardMessage: Sinch_Conversationapi_Type_CardMessage {
    get {
      if case .cardMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_CardMessage()
    }
    set {_uniqueStorage()._message = .cardMessage(newValue)}
  }

  /// A list of cards rendered horizontally on supported channels (Messenger and RCS)
  /// and as a numbered list on SMS and WhatsApp. 
  var carouselMessage: Sinch_Conversationapi_Type_CarouselMessage {
    get {
      if case .carouselMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_CarouselMessage()
    }
    set {_uniqueStorage()._message = .carouselMessage(newValue)}
  }

  /// A message defining a physical location on a map.
  var locationMessage: Sinch_Conversationapi_Type_LocationMessage {
    get {
      if case .locationMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_LocationMessage()
    }
    set {_uniqueStorage()._message = .locationMessage(newValue)}
  }

  /// A message containing contact information. 
  var contactInfoMessage: Sinch_Conversationapi_Type_ContactInfoMessage {
    get {
      if case .contactInfoMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_ContactInfoMessage()
    }
    set {_uniqueStorage()._message = .contactInfoMessage(newValue)}
  }

  /// A message containing multiple sections which can have items such as choices
  /// and products. 
  var listMessage: Sinch_Conversationapi_Type_ListMessage {
    get {
      if case .listMessage(let v)? = _storage._message {return v}
      return Sinch_Conversationapi_Type_ListMessage()
    }
    set {_uniqueStorage()._message = .listMessage(newValue)}
  }

  /// Optional identity of an sender
  var agent: Sinch_Conversationapi_Type_Agent {
    get {return _storage._agent ?? Sinch_Conversationapi_Type_Agent()}
    set {_uniqueStorage()._agent = newValue}
  }
  /// Returns true if `agent` has been explicitly set.
  var hasAgent: Bool {return _storage._agent != nil}
  /// Clears the value of `agent`. Subsequent reads from it will return its default value.
  mutating func clearAgent() {_uniqueStorage()._agent = nil}

  var explicitChannelOmniMessage: Dictionary<String,Sinch_Conversationapi_Type_OmniMessageOverride> {
    get {return _storage._explicitChannelOmniMessage}
    set {_uniqueStorage()._explicitChannelOmniMessage = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The content of the message.
  /// One of TextMessage, MediaMessage,
  /// TemplateMessage, ChoiceMessage,
  /// CardMessage, CarouselMessage, 
  /// LocationMessage, ContactInfoMessage
  /// or ListMessage. 
  enum OneOf_Message: Equatable {
    /// A message containing only text.
    case textMessage(Sinch_Conversationapi_Type_TextMessage)
    /// A message containing media such as images, GIFs, and video.
    case mediaMessage(Sinch_Conversationapi_Type_MediaMessage)
    /// A message with predefined template.
    /// Requires an existing template. 
    case templateMessage(Sinch_Conversationapi_Type_TemplateMessage)
    /// A message containing a "choice"/"action" and description.
    /// A choice message is transcoded as a button in Messenger and RCS
    /// and as a bullet point in SMS and WhatsApp. 
    case choiceMessage(Sinch_Conversationapi_Type_ChoiceMessage)
    /// A rich message which consists of text and description with image or video.
    /// It can also contain a set of "choices" ("actions"). 
    case cardMessage(Sinch_Conversationapi_Type_CardMessage)
    /// A list of cards rendered horizontally on supported channels (Messenger and RCS)
    /// and as a numbered list on SMS and WhatsApp. 
    case carouselMessage(Sinch_Conversationapi_Type_CarouselMessage)
    /// A message defining a physical location on a map.
    case locationMessage(Sinch_Conversationapi_Type_LocationMessage)
    /// A message containing contact information. 
    case contactInfoMessage(Sinch_Conversationapi_Type_ContactInfoMessage)
    /// A message containing multiple sections which can have items such as choices
    /// and products. 
    case listMessage(Sinch_Conversationapi_Type_ListMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_AppMessage.OneOf_Message, rhs: Sinch_Conversationapi_Type_AppMessage.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.textMessage, .textMessage): return {
        guard case .textMessage(let l) = lhs, case .textMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaMessage, .mediaMessage): return {
        guard case .mediaMessage(let l) = lhs, case .mediaMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.templateMessage, .templateMessage): return {
        guard case .templateMessage(let l) = lhs, case .templateMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.choiceMessage, .choiceMessage): return {
        guard case .choiceMessage(let l) = lhs, case .choiceMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cardMessage, .cardMessage): return {
        guard case .cardMessage(let l) = lhs, case .cardMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.carouselMessage, .carouselMessage): return {
        guard case .carouselMessage(let l) = lhs, case .carouselMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.locationMessage, .locationMessage): return {
        guard case .locationMessage(let l) = lhs, case .locationMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactInfoMessage, .contactInfoMessage): return {
        guard case .contactInfoMessage(let l) = lhs, case .contactInfoMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.listMessage, .listMessage): return {
        guard case .listMessage(let l) = lhs, case .listMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Sinch_Conversationapi_Type_OmniMessageOverride {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is a copy of the 'oneof message' definition in AppMessage. This list
  /// has to be duplicated as it's impossible to extract this type and replace
  /// the former definition in AppMessage without breaking backwards
  /// compatibility. 
  var message: Sinch_Conversationapi_Type_OmniMessageOverride.OneOf_Message? = nil

  var textMessage: Sinch_Conversationapi_Type_TextMessage {
    get {
      if case .textMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_TextMessage()
    }
    set {message = .textMessage(newValue)}
  }

  var mediaMessage: Sinch_Conversationapi_Type_MediaMessage {
    get {
      if case .mediaMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_MediaMessage()
    }
    set {message = .mediaMessage(newValue)}
  }

  var templateReference: Sinch_Conversationapi_Type_TemplateReference {
    get {
      if case .templateReference(let v)? = message {return v}
      return Sinch_Conversationapi_Type_TemplateReference()
    }
    set {message = .templateReference(newValue)}
  }

  var choiceMessage: Sinch_Conversationapi_Type_ChoiceMessage {
    get {
      if case .choiceMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_ChoiceMessage()
    }
    set {message = .choiceMessage(newValue)}
  }

  var cardMessage: Sinch_Conversationapi_Type_CardMessage {
    get {
      if case .cardMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_CardMessage()
    }
    set {message = .cardMessage(newValue)}
  }

  var carouselMessage: Sinch_Conversationapi_Type_CarouselMessage {
    get {
      if case .carouselMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_CarouselMessage()
    }
    set {message = .carouselMessage(newValue)}
  }

  var locationMessage: Sinch_Conversationapi_Type_LocationMessage {
    get {
      if case .locationMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_LocationMessage()
    }
    set {message = .locationMessage(newValue)}
  }

  var contactInfoMessage: Sinch_Conversationapi_Type_ContactInfoMessage {
    get {
      if case .contactInfoMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_ContactInfoMessage()
    }
    set {message = .contactInfoMessage(newValue)}
  }

  var listMessage: Sinch_Conversationapi_Type_ListMessage {
    get {
      if case .listMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_ListMessage()
    }
    set {message = .listMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// This is a copy of the 'oneof message' definition in AppMessage. This list
  /// has to be duplicated as it's impossible to extract this type and replace
  /// the former definition in AppMessage without breaking backwards
  /// compatibility. 
  enum OneOf_Message: Equatable {
    case textMessage(Sinch_Conversationapi_Type_TextMessage)
    case mediaMessage(Sinch_Conversationapi_Type_MediaMessage)
    case templateReference(Sinch_Conversationapi_Type_TemplateReference)
    case choiceMessage(Sinch_Conversationapi_Type_ChoiceMessage)
    case cardMessage(Sinch_Conversationapi_Type_CardMessage)
    case carouselMessage(Sinch_Conversationapi_Type_CarouselMessage)
    case locationMessage(Sinch_Conversationapi_Type_LocationMessage)
    case contactInfoMessage(Sinch_Conversationapi_Type_ContactInfoMessage)
    case listMessage(Sinch_Conversationapi_Type_ListMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_OmniMessageOverride.OneOf_Message, rhs: Sinch_Conversationapi_Type_OmniMessageOverride.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.textMessage, .textMessage): return {
        guard case .textMessage(let l) = lhs, case .textMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaMessage, .mediaMessage): return {
        guard case .mediaMessage(let l) = lhs, case .mediaMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.templateReference, .templateReference): return {
        guard case .templateReference(let l) = lhs, case .templateReference(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.choiceMessage, .choiceMessage): return {
        guard case .choiceMessage(let l) = lhs, case .choiceMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cardMessage, .cardMessage): return {
        guard case .cardMessage(let l) = lhs, case .cardMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.carouselMessage, .carouselMessage): return {
        guard case .carouselMessage(let l) = lhs, case .carouselMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.locationMessage, .locationMessage): return {
        guard case .locationMessage(let l) = lhs, case .locationMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactInfoMessage, .contactInfoMessage): return {
        guard case .contactInfoMessage(let l) = lhs, case .contactInfoMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.listMessage, .listMessage): return {
        guard case .listMessage(let l) = lhs, case .listMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Message originating from a contact
struct Sinch_Conversationapi_Type_ContactMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Sinch_Conversationapi_Type_ContactMessage.OneOf_Message? = nil

  var textMessage: Sinch_Conversationapi_Type_TextMessage {
    get {
      if case .textMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_TextMessage()
    }
    set {message = .textMessage(newValue)}
  }

  var mediaMessage: Sinch_Conversationapi_Type_MediaMessage {
    get {
      if case .mediaMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_MediaMessage()
    }
    set {message = .mediaMessage(newValue)}
  }

  var locationMessage: Sinch_Conversationapi_Type_LocationMessage {
    get {
      if case .locationMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_LocationMessage()
    }
    set {message = .locationMessage(newValue)}
  }

  var choiceResponseMessage: Sinch_Conversationapi_Type_ChoiceResponseMessage {
    get {
      if case .choiceResponseMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_ChoiceResponseMessage()
    }
    set {message = .choiceResponseMessage(newValue)}
  }

  var mediaCardMessage: Sinch_Conversationapi_Type_MediaCardMessage {
    get {
      if case .mediaCardMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_MediaCardMessage()
    }
    set {message = .mediaCardMessage(newValue)}
  }

  var fallbackMessage: Sinch_Conversationapi_Type_FallbackMessage {
    get {
      if case .fallbackMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_FallbackMessage()
    }
    set {message = .fallbackMessage(newValue)}
  }

  var multipleChoiceResponseMessage: Sinch_Conversationapi_Type_MultipleChoiceResponseMessage {
    get {
      if case .multipleChoiceResponseMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_MultipleChoiceResponseMessage()
    }
    set {message = .multipleChoiceResponseMessage(newValue)}
  }

  var productResponseMessage: Sinch_Conversationapi_Type_ProductResponseMessage {
    get {
      if case .productResponseMessage(let v)? = message {return v}
      return Sinch_Conversationapi_Type_ProductResponseMessage()
    }
    set {message = .productResponseMessage(newValue)}
  }

  ///Optional. Included if the contact message is a response to a previous App message.
  var replyTo: Sinch_Conversationapi_Type_ReplyTo {
    get {return _replyTo ?? Sinch_Conversationapi_Type_ReplyTo()}
    set {_replyTo = newValue}
  }
  /// Returns true if `replyTo` has been explicitly set.
  var hasReplyTo: Bool {return self._replyTo != nil}
  /// Clears the value of `replyTo`. Subsequent reads from it will return its default value.
  mutating func clearReplyTo() {self._replyTo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case textMessage(Sinch_Conversationapi_Type_TextMessage)
    case mediaMessage(Sinch_Conversationapi_Type_MediaMessage)
    case locationMessage(Sinch_Conversationapi_Type_LocationMessage)
    case choiceResponseMessage(Sinch_Conversationapi_Type_ChoiceResponseMessage)
    case mediaCardMessage(Sinch_Conversationapi_Type_MediaCardMessage)
    case fallbackMessage(Sinch_Conversationapi_Type_FallbackMessage)
    case multipleChoiceResponseMessage(Sinch_Conversationapi_Type_MultipleChoiceResponseMessage)
    case productResponseMessage(Sinch_Conversationapi_Type_ProductResponseMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ContactMessage.OneOf_Message, rhs: Sinch_Conversationapi_Type_ContactMessage.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.textMessage, .textMessage): return {
        guard case .textMessage(let l) = lhs, case .textMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaMessage, .mediaMessage): return {
        guard case .mediaMessage(let l) = lhs, case .mediaMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.locationMessage, .locationMessage): return {
        guard case .locationMessage(let l) = lhs, case .locationMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.choiceResponseMessage, .choiceResponseMessage): return {
        guard case .choiceResponseMessage(let l) = lhs, case .choiceResponseMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaCardMessage, .mediaCardMessage): return {
        guard case .mediaCardMessage(let l) = lhs, case .mediaCardMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.fallbackMessage, .fallbackMessage): return {
        guard case .fallbackMessage(let l) = lhs, case .fallbackMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.multipleChoiceResponseMessage, .multipleChoiceResponseMessage): return {
        guard case .multipleChoiceResponseMessage(let l) = lhs, case .multipleChoiceResponseMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.productResponseMessage, .productResponseMessage): return {
        guard case .productResponseMessage(let l) = lhs, case .productResponseMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _replyTo: Sinch_Conversationapi_Type_ReplyTo? = nil
}

/// Message containing only text
struct Sinch_Conversationapi_Type_TextMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The text to be sent.
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Message containing media
struct Sinch_Conversationapi_Type_MediaMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Url to the file.
  var url: String = String()

  ///Optional. Will be used where it is natively supported
  var thumbnailURL: String = String()

  ///Optional. Overrides the media file name.
  var filenameOverride: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Contact Message containing media and caption
struct Sinch_Conversationapi_Type_MediaCardMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Url to the file.
  var url: String = String()

  /// Optional. Caption for the media on channels, where its supported.
  var caption: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Fallback message, appears when original contact message can not be handled
struct Sinch_Conversationapi_Type_FallbackMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Reason the fallback message was returned instead of original one.
  var reason: Sinch_Conversationapi_Type_Reason {
    get {return _reason ?? Sinch_Conversationapi_Type_Reason()}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  /// Optional. The raw fallback message if provided by the channel.
  var rawMessage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reason: Sinch_Conversationapi_Type_Reason? = nil
}

/// Message referring to predefined template
struct Sinch_Conversationapi_Type_TemplateMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Channel specific template reference with parameters per channel.
  /// The channel template if exists overrides the omnichannel template.
  /// At least one of channel_template or omni_template needs to be present.
  /// The key in the map must point to a valid conversation channel as
  /// defined by the enum ConversationChannel. 
  var channelTemplate: Dictionary<String,Sinch_Conversationapi_Type_TemplateReference> = [:]

  /// Optional. Omnichannel template stored in Conversation API Template Store
  /// as AppMessage. At least one of channel_template or omni_template needs to be present. 
  var omniTemplate: Sinch_Conversationapi_Type_TemplateReference {
    get {return _omniTemplate ?? Sinch_Conversationapi_Type_TemplateReference()}
    set {_omniTemplate = newValue}
  }
  /// Returns true if `omniTemplate` has been explicitly set.
  var hasOmniTemplate: Bool {return self._omniTemplate != nil}
  /// Clears the value of `omniTemplate`. Subsequent reads from it will return its default value.
  mutating func clearOmniTemplate() {self._omniTemplate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _omniTemplate: Sinch_Conversationapi_Type_TemplateReference? = nil
}

/// Template reference with concrete parameter values
///
/// The referenced template can be an omnichannel template
/// stored in Conversation API Template Store as AppMessage
/// or it can reference external channel-specific template
/// such as WhatsApp Business Template. 
struct Sinch_Conversationapi_Type_TemplateReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The ID of the template.
  var templateID: String = String()

  /// Required for omnichannel template. Optional for channel template.
  /// Used to specify what version of a template to use.
  /// This will be used in conjunction with language_code. 
  var version: String = String()

  /// Optional. The BCP-47 language code, such as "en-US" or "sr-Latn".
  /// For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
  /// English is the default language_code. 
  var languageCode: String = String()

  /// Optional. Required if the template
  /// has parameters. Concrete values must
  /// be present for all defined parameters
  /// in the template. Parameters can be different for
  /// different versions and/or languages of the template. 
  var parameters: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Message with geo location
struct Sinch_Conversationapi_Type_LocationMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The title is shown close to the
  /// button or link that leads to a map showing the location.
  /// The title is clickable in some cases. 
  var title: String = String()

  /// Required. Geo coordinates.
  var coordinates: Sinch_Conversationapi_Type_Coordinates {
    get {return _coordinates ?? Sinch_Conversationapi_Type_Coordinates()}
    set {_coordinates = newValue}
  }
  /// Returns true if `coordinates` has been explicitly set.
  var hasCoordinates: Bool {return self._coordinates != nil}
  /// Clears the value of `coordinates`. Subsequent reads from it will return its default value.
  mutating func clearCoordinates() {self._coordinates = nil}

  /// Optional. Label or name for the position.
  var label: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _coordinates: Sinch_Conversationapi_Type_Coordinates? = nil
}

/// Choice/Action
///
/// A choice is an action the user can take such as
/// buttons for quick replies, call actions etc. 
struct Sinch_Conversationapi_Type_Choice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The choice content.
  var choice: Sinch_Conversationapi_Type_Choice.OneOf_Choice? = nil

  var textMessage: Sinch_Conversationapi_Type_TextMessage {
    get {
      if case .textMessage(let v)? = choice {return v}
      return Sinch_Conversationapi_Type_TextMessage()
    }
    set {choice = .textMessage(newValue)}
  }

  var urlMessage: Sinch_Conversationapi_Type_UrlMessage {
    get {
      if case .urlMessage(let v)? = choice {return v}
      return Sinch_Conversationapi_Type_UrlMessage()
    }
    set {choice = .urlMessage(newValue)}
  }

  var callMessage: Sinch_Conversationapi_Type_CallMessage {
    get {
      if case .callMessage(let v)? = choice {return v}
      return Sinch_Conversationapi_Type_CallMessage()
    }
    set {choice = .callMessage(newValue)}
  }

  var locationMessage: Sinch_Conversationapi_Type_LocationMessage {
    get {
      if case .locationMessage(let v)? = choice {return v}
      return Sinch_Conversationapi_Type_LocationMessage()
    }
    set {choice = .locationMessage(newValue)}
  }

  /// Optional. This data will be returned in the ChoiceResponseMessage.
  /// The default is message_id_{text, title}. 
  var postbackData: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The choice content.
  enum OneOf_Choice: Equatable {
    case textMessage(Sinch_Conversationapi_Type_TextMessage)
    case urlMessage(Sinch_Conversationapi_Type_UrlMessage)
    case callMessage(Sinch_Conversationapi_Type_CallMessage)
    case locationMessage(Sinch_Conversationapi_Type_LocationMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_Choice.OneOf_Choice, rhs: Sinch_Conversationapi_Type_Choice.OneOf_Choice) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.textMessage, .textMessage): return {
        guard case .textMessage(let l) = lhs, case .textMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.urlMessage, .urlMessage): return {
        guard case .urlMessage(let l) = lhs, case .urlMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callMessage, .callMessage): return {
        guard case .callMessage(let l) = lhs, case .callMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.locationMessage, .locationMessage): return {
        guard case .locationMessage(let l) = lhs, case .locationMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Call Message
///
/// Message for triggering a call. 
struct Sinch_Conversationapi_Type_CallMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Title shown close to the phone number.
  /// The title is clickable in some cases. 
  var title: String = String()

  /// Required. Phone number in E.164 with leading +.
  var phoneNumber: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Choice Message
///
/// Message containing choices/actions. 
struct Sinch_Conversationapi_Type_ChoiceMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required.
  var textMessage: Sinch_Conversationapi_Type_TextMessage {
    get {return _textMessage ?? Sinch_Conversationapi_Type_TextMessage()}
    set {_textMessage = newValue}
  }
  /// Returns true if `textMessage` has been explicitly set.
  var hasTextMessage: Bool {return self._textMessage != nil}
  /// Clears the value of `textMessage`. Subsequent reads from it will return its default value.
  mutating func clearTextMessage() {self._textMessage = nil}

  /// Required. The number of choices is limited to 10.
  var choices: [Sinch_Conversationapi_Type_Choice] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _textMessage: Sinch_Conversationapi_Type_TextMessage? = nil
}

/// Card Message
///
/// Message containing text, media and choices. 
struct Sinch_Conversationapi_Type_CardMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional.
  var title: String = String()

  /// Optional.
  var description_p: String = String()

  /// Optional.
  var mediaMessage: Sinch_Conversationapi_Type_MediaMessage {
    get {return _mediaMessage ?? Sinch_Conversationapi_Type_MediaMessage()}
    set {_mediaMessage = newValue}
  }
  /// Returns true if `mediaMessage` has been explicitly set.
  var hasMediaMessage: Bool {return self._mediaMessage != nil}
  /// Clears the value of `mediaMessage`. Subsequent reads from it will return its default value.
  mutating func clearMediaMessage() {self._mediaMessage = nil}

  /// Optional. The number of choices is limited to 10. 
  var choices: [Sinch_Conversationapi_Type_Choice] = []

  /// Optional. Will be used where it is natively supported
  var height: Sinch_Conversationapi_Type_CardHeight = .unspecifiedHeight

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mediaMessage: Sinch_Conversationapi_Type_MediaMessage? = nil
}

/// Carousel Message
///
/// Message containing a list of cards often
/// rendered horizontally on supported channels. Supported
/// types for media are only images, e.g. .png, .jpg, .jpeg
/// extensions. 
struct Sinch_Conversationapi_Type_CarouselMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. A list of 1..10 cards.
  var cards: [Sinch_Conversationapi_Type_CardMessage] = []

  /// Optional. Outer choices on the carousel level.
  /// The number of outer choices is limited to 10. 
  var choices: [Sinch_Conversationapi_Type_Choice] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Choice Response Message
///
/// Represents a response to a choice message. 
struct Sinch_Conversationapi_Type_ChoiceResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The message id containing the choice.
  var messageID: String = String()

  /// Required. The postback_data defined in the selected choice.
  var postbackData: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Multiple Choice Response Message
///
/// Represents a response with multiple choices. 
struct Sinch_Conversationapi_Type_MultipleChoiceResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The message id containing the choice.
  var messageID: String = String()

  /// Required. The postback payloads for the selected choices.
  var postbackData: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Url Message
///
/// A generic URL message. 
struct Sinch_Conversationapi_Type_UrlMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The title shown close to the URL.
  /// The title will be clickable in some cases. 
  var title: String = String()

  /// Required. The url to show.
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Reply To
///
/// If the contact message was a response to a previous App message then this field contains information about that. 
struct Sinch_Conversationapi_Type_ReplyTo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Id of the message that this is a response to
  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Contact Info Message
///
/// A generic Contact Info message, that speaks directly to the native mobile contacts app. 
struct Sinch_Conversationapi_Type_ContactInfoMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Name information of the contact.
  var name: Sinch_Conversationapi_Type_NameInfo {
    get {return _name ?? Sinch_Conversationapi_Type_NameInfo()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// Required. Phone numbers of the contact.
  var phoneNumbers: [Sinch_Conversationapi_Type_PhoneNumberInfo] = []

  /// Optional. Physical addresses of the contact.
  var addresses: [Sinch_Conversationapi_Type_AddressInfo] = []

  /// Optional. Email addresses of the contact.
  var emailAddresses: [Sinch_Conversationapi_Type_EmailInfo] = []

  /// Optional. Organization information of the contact.
  var organization: Sinch_Conversationapi_Type_OrganizationInfo {
    get {return _organization ?? Sinch_Conversationapi_Type_OrganizationInfo()}
    set {_organization = newValue}
  }
  /// Returns true if `organization` has been explicitly set.
  var hasOrganization: Bool {return self._organization != nil}
  /// Clears the value of `organization`. Subsequent reads from it will return its default value.
  mutating func clearOrganization() {self._organization = nil}

  /// Optional. URLs/websites associated with the contact.
  var urls: [Sinch_Conversationapi_Type_UrlInfo] = []

  /// Optional. Date of birth.
  /// Format: "YYYY-MM-DD"
  var birthday: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: Sinch_Conversationapi_Type_NameInfo? = nil
  fileprivate var _organization: Sinch_Conversationapi_Type_OrganizationInfo? = nil
}

/// Address Info object
///
/// A physical address. 
struct Sinch_Conversationapi_Type_AddressInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. City name.
  var city: String = String()

  /// Optional. Country name.
  var country: String = String()

  /// Optional. Name of a state or region of a country.
  var state: String = String()

  /// Optional. Street name including street/apartment number.
  var street: String = String()

  /// Optional. Zip/postal code.
  var zip: String = String()

  /// Optional. Address type, e.g. WORK or HOME.
  var type: String = String()

  /// Optional. Two letter country code.
  /// Used for formatting. 
  var countryCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Email Info object
///
/// An email address. 
struct Sinch_Conversationapi_Type_EmailInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Email address.
  var emailAddress: String = String()

  /// Optional. Email address type, e.g. WORK or HOME.
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Name Info object
///
/// Name information. 
struct Sinch_Conversationapi_Type_NameInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Full name.
  /// Will be the displayed contact name. Format as desired. 
  var fullName: String = String()

  /// Optional. First name/given name.
  var firstName: String = String()

  /// Optional. Family name/last name/surname.
  var lastName: String = String()

  /// Optional. Middle name.
  var middleName: String = String()

  /// Optional. Prefix, e.g. Mr or Ms.
  var prefix: String = String()

  /// Optional. Suffix, e.g. Jr or PhD.
  var suffix: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Organization Info object
///
/// Organization information. 
struct Sinch_Conversationapi_Type_OrganizationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Company name.
  var company: String = String()

  /// Optional. Department at the company.
  var department: String = String()

  /// Optional. Corporate title, e.g. software engineer.
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Phone Number Info object
///
/// A Phone number. 
struct Sinch_Conversationapi_Type_PhoneNumberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Phone number.
  /// Potential country codes included. 
  var phoneNumber: String = String()

  /// Optional. Phone number type, e.g. WORK or HOME.
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// URL Info
/// 
/// A URL/website. 
struct Sinch_Conversationapi_Type_UrlInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The URL to be referenced.
  var url: String = String()

  /// Optional. URL type, e.g. HOME or ORG. 
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// List Message
///
/// Message containing multiple sections which can have items such as choices and products.
/// All items must be of the same type in a List Message. 
struct Sinch_Conversationapi_Type_ListMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The title of the list message.
  var title: String = String()

  /// Optional. The description (or subtitle) of the list message.
  var description_p: String = String()

  /// Optional. The media of the list message.
  var media: Sinch_Conversationapi_Type_MediaMessage {
    get {return _media ?? Sinch_Conversationapi_Type_MediaMessage()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  mutating func clearMedia() {self._media = nil}

  /// Required. The sections of the list message.
  var sections: [Sinch_Conversationapi_Type_ListSection] = []

  /// Optional. List Message specific properties
  var messageProperties: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _media: Sinch_Conversationapi_Type_MediaMessage? = nil
}

/// List Section
///
/// A section from a list message. 
struct Sinch_Conversationapi_Type_ListSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The title of the list section.
  var title: String = String()

  /// Required. The items on this section.
  var items: [Sinch_Conversationapi_Type_ListItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// List Section
///
/// An item from a list section. 
struct Sinch_Conversationapi_Type_ListItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The item information.
  var item: Sinch_Conversationapi_Type_ListItem.OneOf_Item? = nil

  var choice: Sinch_Conversationapi_Type_ChoiceItem {
    get {
      if case .choice(let v)? = item {return v}
      return Sinch_Conversationapi_Type_ChoiceItem()
    }
    set {item = .choice(newValue)}
  }

  var product: Sinch_Conversationapi_Type_ProductItem {
    get {
      if case .product(let v)? = item {return v}
      return Sinch_Conversationapi_Type_ProductItem()
    }
    set {item = .product(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Required. The item information.
  enum OneOf_Item: Equatable {
    case choice(Sinch_Conversationapi_Type_ChoiceItem)
    case product(Sinch_Conversationapi_Type_ProductItem)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Conversationapi_Type_ListItem.OneOf_Item, rhs: Sinch_Conversationapi_Type_ListItem.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.choice, .choice): return {
        guard case .choice(let l) = lhs, case .choice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.product, .product): return {
        guard case .product(let l) = lhs, case .product(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Sinch_Conversationapi_Type_ChoiceItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The title of this choice item.
  var title: String = String()

  /// Optional. The description (or subtitle) of this choice item.
  var description_p: String = String()

  /// Optional. The media of this choice item.
  var media: Sinch_Conversationapi_Type_MediaMessage {
    get {return _media ?? Sinch_Conversationapi_Type_MediaMessage()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  mutating func clearMedia() {self._media = nil}

  /// Optional. Postback data that will be returned in the MO if the user selects
  /// this option.
  var postbackData: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _media: Sinch_Conversationapi_Type_MediaMessage? = nil
}

struct Sinch_Conversationapi_Type_ProductItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The identifier of the product.
  var id: String = String()

  /// Required. Which marketplace the product belongs to. Possible values: FACEBOOK.
  var marketplace: String = String()

  /// Output only. The quantity of the chosen product.
  var quantity: Int32 = 0

  /// Output only. The price of the chosen product.
  var itemPrice: Float = 0

  /// Output only. The price currency.
  var currency: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Conversationapi_Type_ProductResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The selected products.
  var products: [Sinch_Conversationapi_Type_ProductItem] = []

  /// Optional. Some text that may be sent with the selected products.
  var text: String = String()

  /// Optional. The catalog id that the selected products belong to.
  var catalogID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sinch_Conversationapi_Type_ConversationDirection: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CardHeight: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ConversationMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ConversationMessage.OneOf_Message: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AppMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AppMessage.OneOf_Message: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_OmniMessageOverride: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_OmniMessageOverride.OneOf_Message: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ContactMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ContactMessage.OneOf_Message: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_TextMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_MediaMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_MediaCardMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_FallbackMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_TemplateMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_TemplateReference: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_LocationMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_Choice: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_Choice.OneOf_Choice: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CallMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ChoiceMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CardMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_CarouselMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ChoiceResponseMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_MultipleChoiceResponseMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_UrlMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ReplyTo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ContactInfoMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_AddressInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_EmailInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_NameInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_OrganizationInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_PhoneNumberInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_UrlInfo: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ListMessage: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ListSection: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ListItem: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ListItem.OneOf_Item: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ChoiceItem: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ProductItem: @unchecked Sendable {}
extension Sinch_Conversationapi_Type_ProductResponseMessage: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.conversationapi.type"

extension Sinch_Conversationapi_Type_ConversationDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNDEFINED_DIRECTION"),
    1: .same(proto: "TO_APP"),
    2: .same(proto: "TO_CONTACT"),
  ]
}

extension Sinch_Conversationapi_Type_CardHeight: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_HEIGHT"),
    1: .same(proto: "SHORT"),
    2: .same(proto: "MEDIUM"),
    3: .same(proto: "TALL"),
  ]
}

extension Sinch_Conversationapi_Type_ConversationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConversationMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "direction"),
    3: .standard(proto: "app_message"),
    4: .standard(proto: "contact_message"),
    5: .standard(proto: "channel_identity"),
    6: .standard(proto: "conversation_id"),
    7: .standard(proto: "contact_id"),
    8: .same(proto: "metadata"),
    9: .standard(proto: "accept_time"),
    10: .standard(proto: "sender_id"),
    11: .standard(proto: "processing_mode"),
    12: .same(proto: "injected"),
    13: .standard(proto: "message_status"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _direction: Sinch_Conversationapi_Type_ConversationDirection = .undefinedDirection
    var _message: Sinch_Conversationapi_Type_ConversationMessage.OneOf_Message?
    var _channelIdentity: Sinch_Conversationapi_Type_ChannelIdentity? = nil
    var _conversationID: String = String()
    var _contactID: String = String()
    var _metadata: String = String()
    var _acceptTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _senderID: String = String()
    var _processingMode: Sinch_Conversationapi_Type_ProcessingMode = .conversation
    var _injected: Bool = false
    var _messageStatus: Sinch_Conversationapi_Type_MessageStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _direction = source._direction
      _message = source._message
      _channelIdentity = source._channelIdentity
      _conversationID = source._conversationID
      _contactID = source._contactID
      _metadata = source._metadata
      _acceptTime = source._acceptTime
      _senderID = source._senderID
      _processingMode = source._processingMode
      _injected = source._injected
      _messageStatus = source._messageStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 3: try {
          var v: Sinch_Conversationapi_Type_AppMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .appMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .appMessage(v)
          }
        }()
        case 4: try {
          var v: Sinch_Conversationapi_Type_ContactMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .contactMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .contactMessage(v)
          }
        }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._channelIdentity) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._conversationID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._contactID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._metadata) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._acceptTime) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._senderID) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._processingMode) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._injected) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._messageStatus) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._direction != .undefinedDirection {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 2)
      }
      switch _storage._message {
      case .appMessage?: try {
        guard case .appMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .contactMessage?: try {
        guard case .contactMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case nil: break
      }
      try { if let v = _storage._channelIdentity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._conversationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._conversationID, fieldNumber: 6)
      }
      if !_storage._contactID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactID, fieldNumber: 7)
      }
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularStringField(value: _storage._metadata, fieldNumber: 8)
      }
      try { if let v = _storage._acceptTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._senderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._senderID, fieldNumber: 10)
      }
      if _storage._processingMode != .conversation {
        try visitor.visitSingularEnumField(value: _storage._processingMode, fieldNumber: 11)
      }
      if _storage._injected != false {
        try visitor.visitSingularBoolField(value: _storage._injected, fieldNumber: 12)
      }
      try { if let v = _storage._messageStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ConversationMessage, rhs: Sinch_Conversationapi_Type_ConversationMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._channelIdentity != rhs_storage._channelIdentity {return false}
        if _storage._conversationID != rhs_storage._conversationID {return false}
        if _storage._contactID != rhs_storage._contactID {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._acceptTime != rhs_storage._acceptTime {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        if _storage._processingMode != rhs_storage._processingMode {return false}
        if _storage._injected != rhs_storage._injected {return false}
        if _storage._messageStatus != rhs_storage._messageStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_AppMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "explicit_channel_message"),
    2: .standard(proto: "text_message"),
    3: .standard(proto: "media_message"),
    4: .standard(proto: "template_message"),
    5: .standard(proto: "choice_message"),
    6: .standard(proto: "card_message"),
    7: .standard(proto: "carousel_message"),
    8: .standard(proto: "location_message"),
    9: .standard(proto: "contact_info_message"),
    11: .standard(proto: "list_message"),
    10: .same(proto: "agent"),
    12: .standard(proto: "explicit_channel_omni_message"),
  ]

  fileprivate class _StorageClass {
    var _explicitChannelMessage: Dictionary<String,String> = [:]
    var _message: Sinch_Conversationapi_Type_AppMessage.OneOf_Message?
    var _agent: Sinch_Conversationapi_Type_Agent? = nil
    var _explicitChannelOmniMessage: Dictionary<String,Sinch_Conversationapi_Type_OmniMessageOverride> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _explicitChannelMessage = source._explicitChannelMessage
      _message = source._message
      _agent = source._agent
      _explicitChannelOmniMessage = source._explicitChannelOmniMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._explicitChannelMessage) }()
        case 2: try {
          var v: Sinch_Conversationapi_Type_TextMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .textMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .textMessage(v)
          }
        }()
        case 3: try {
          var v: Sinch_Conversationapi_Type_MediaMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .mediaMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .mediaMessage(v)
          }
        }()
        case 4: try {
          var v: Sinch_Conversationapi_Type_TemplateMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .templateMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .templateMessage(v)
          }
        }()
        case 5: try {
          var v: Sinch_Conversationapi_Type_ChoiceMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .choiceMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .choiceMessage(v)
          }
        }()
        case 6: try {
          var v: Sinch_Conversationapi_Type_CardMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .cardMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .cardMessage(v)
          }
        }()
        case 7: try {
          var v: Sinch_Conversationapi_Type_CarouselMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .carouselMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .carouselMessage(v)
          }
        }()
        case 8: try {
          var v: Sinch_Conversationapi_Type_LocationMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .locationMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .locationMessage(v)
          }
        }()
        case 9: try {
          var v: Sinch_Conversationapi_Type_ContactInfoMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .contactInfoMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .contactInfoMessage(v)
          }
        }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._agent) }()
        case 11: try {
          var v: Sinch_Conversationapi_Type_ListMessage?
          var hadOneofValue = false
          if let current = _storage._message {
            hadOneofValue = true
            if case .listMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._message = .listMessage(v)
          }
        }()
        case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Sinch_Conversationapi_Type_OmniMessageOverride>.self, value: &_storage._explicitChannelOmniMessage) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._explicitChannelMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._explicitChannelMessage, fieldNumber: 1)
      }
      switch _storage._message {
      case .textMessage?: try {
        guard case .textMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .mediaMessage?: try {
        guard case .mediaMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .templateMessage?: try {
        guard case .templateMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .choiceMessage?: try {
        guard case .choiceMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .cardMessage?: try {
        guard case .cardMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .carouselMessage?: try {
        guard case .carouselMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .locationMessage?: try {
        guard case .locationMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .contactInfoMessage?: try {
        guard case .contactInfoMessage(let v)? = _storage._message else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      default: break
      }
      try { if let v = _storage._agent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if case .listMessage(let v)? = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._explicitChannelOmniMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Sinch_Conversationapi_Type_OmniMessageOverride>.self, value: _storage._explicitChannelOmniMessage, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_AppMessage, rhs: Sinch_Conversationapi_Type_AppMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._explicitChannelMessage != rhs_storage._explicitChannelMessage {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._agent != rhs_storage._agent {return false}
        if _storage._explicitChannelOmniMessage != rhs_storage._explicitChannelOmniMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_OmniMessageOverride: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OmniMessageOverride"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_message"),
    2: .standard(proto: "media_message"),
    3: .standard(proto: "template_reference"),
    4: .standard(proto: "choice_message"),
    5: .standard(proto: "card_message"),
    6: .standard(proto: "carousel_message"),
    7: .standard(proto: "location_message"),
    8: .standard(proto: "contact_info_message"),
    9: .standard(proto: "list_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_TextMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .textMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .textMessage(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_MediaMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .mediaMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .mediaMessage(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_TemplateReference?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .templateReference(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .templateReference(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_ChoiceMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .choiceMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .choiceMessage(v)
        }
      }()
      case 5: try {
        var v: Sinch_Conversationapi_Type_CardMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .cardMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .cardMessage(v)
        }
      }()
      case 6: try {
        var v: Sinch_Conversationapi_Type_CarouselMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .carouselMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .carouselMessage(v)
        }
      }()
      case 7: try {
        var v: Sinch_Conversationapi_Type_LocationMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .locationMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .locationMessage(v)
        }
      }()
      case 8: try {
        var v: Sinch_Conversationapi_Type_ContactInfoMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .contactInfoMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .contactInfoMessage(v)
        }
      }()
      case 9: try {
        var v: Sinch_Conversationapi_Type_ListMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .listMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .listMessage(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .textMessage?: try {
      guard case .textMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .mediaMessage?: try {
      guard case .mediaMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .templateReference?: try {
      guard case .templateReference(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .choiceMessage?: try {
      guard case .choiceMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .cardMessage?: try {
      guard case .cardMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .carouselMessage?: try {
      guard case .carouselMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .locationMessage?: try {
      guard case .locationMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .contactInfoMessage?: try {
      guard case .contactInfoMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .listMessage?: try {
      guard case .listMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_OmniMessageOverride, rhs: Sinch_Conversationapi_Type_OmniMessageOverride) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ContactMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_message"),
    2: .standard(proto: "media_message"),
    3: .standard(proto: "location_message"),
    4: .standard(proto: "choice_response_message"),
    6: .standard(proto: "media_card_message"),
    7: .standard(proto: "fallback_message"),
    8: .standard(proto: "multiple_choice_response_message"),
    9: .standard(proto: "product_response_message"),
    5: .standard(proto: "reply_to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_TextMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .textMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .textMessage(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_MediaMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .mediaMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .mediaMessage(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_LocationMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .locationMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .locationMessage(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_ChoiceResponseMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .choiceResponseMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .choiceResponseMessage(v)
        }
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._replyTo) }()
      case 6: try {
        var v: Sinch_Conversationapi_Type_MediaCardMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .mediaCardMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .mediaCardMessage(v)
        }
      }()
      case 7: try {
        var v: Sinch_Conversationapi_Type_FallbackMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .fallbackMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .fallbackMessage(v)
        }
      }()
      case 8: try {
        var v: Sinch_Conversationapi_Type_MultipleChoiceResponseMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .multipleChoiceResponseMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .multipleChoiceResponseMessage(v)
        }
      }()
      case 9: try {
        var v: Sinch_Conversationapi_Type_ProductResponseMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .productResponseMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .productResponseMessage(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .textMessage?: try {
      guard case .textMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .mediaMessage?: try {
      guard case .mediaMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .locationMessage?: try {
      guard case .locationMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .choiceResponseMessage?: try {
      guard case .choiceResponseMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    default: break
    }
    try { if let v = self._replyTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    switch self.message {
    case .mediaCardMessage?: try {
      guard case .mediaCardMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .fallbackMessage?: try {
      guard case .fallbackMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .multipleChoiceResponseMessage?: try {
      guard case .multipleChoiceResponseMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .productResponseMessage?: try {
      guard case .productResponseMessage(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ContactMessage, rhs: Sinch_Conversationapi_Type_ContactMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs._replyTo != rhs._replyTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_TextMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_TextMessage, rhs: Sinch_Conversationapi_Type_TextMessage) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_MediaMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "thumbnail_url"),
    3: .standard(proto: "filename_override"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.thumbnailURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filenameOverride) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.thumbnailURL.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailURL, fieldNumber: 2)
    }
    if !self.filenameOverride.isEmpty {
      try visitor.visitSingularStringField(value: self.filenameOverride, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_MediaMessage, rhs: Sinch_Conversationapi_Type_MediaMessage) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.thumbnailURL != rhs.thumbnailURL {return false}
    if lhs.filenameOverride != rhs.filenameOverride {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_MediaCardMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaCardMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "caption"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.caption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.caption.isEmpty {
      try visitor.visitSingularStringField(value: self.caption, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_MediaCardMessage, rhs: Sinch_Conversationapi_Type_MediaCardMessage) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.caption != rhs.caption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_FallbackMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FallbackMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .standard(proto: "raw_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reason) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rawMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._reason {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.rawMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.rawMessage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_FallbackMessage, rhs: Sinch_Conversationapi_Type_FallbackMessage) -> Bool {
    if lhs._reason != rhs._reason {return false}
    if lhs.rawMessage != rhs.rawMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_TemplateMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemplateMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_template"),
    2: .standard(proto: "omni_template"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Sinch_Conversationapi_Type_TemplateReference>.self, value: &self.channelTemplate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._omniTemplate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.channelTemplate.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Sinch_Conversationapi_Type_TemplateReference>.self, value: self.channelTemplate, fieldNumber: 1)
    }
    try { if let v = self._omniTemplate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_TemplateMessage, rhs: Sinch_Conversationapi_Type_TemplateMessage) -> Bool {
    if lhs.channelTemplate != rhs.channelTemplate {return false}
    if lhs._omniTemplate != rhs._omniTemplate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_TemplateReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemplateReference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "template_id"),
    2: .same(proto: "version"),
    3: .standard(proto: "language_code"),
    4: .same(proto: "parameters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.templateID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.templateID.isEmpty {
      try visitor.visitSingularStringField(value: self.templateID, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 3)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_TemplateReference, rhs: Sinch_Conversationapi_Type_TemplateReference) -> Bool {
    if lhs.templateID != rhs.templateID {return false}
    if lhs.version != rhs.version {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_LocationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "coordinates"),
    3: .same(proto: "label"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._coordinates) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.label) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._coordinates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_LocationMessage, rhs: Sinch_Conversationapi_Type_LocationMessage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._coordinates != rhs._coordinates {return false}
    if lhs.label != rhs.label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_Choice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Choice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_message"),
    2: .standard(proto: "url_message"),
    3: .standard(proto: "call_message"),
    4: .standard(proto: "location_message"),
    5: .standard(proto: "postback_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_TextMessage?
        var hadOneofValue = false
        if let current = self.choice {
          hadOneofValue = true
          if case .textMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.choice = .textMessage(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_UrlMessage?
        var hadOneofValue = false
        if let current = self.choice {
          hadOneofValue = true
          if case .urlMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.choice = .urlMessage(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_CallMessage?
        var hadOneofValue = false
        if let current = self.choice {
          hadOneofValue = true
          if case .callMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.choice = .callMessage(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_LocationMessage?
        var hadOneofValue = false
        if let current = self.choice {
          hadOneofValue = true
          if case .locationMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.choice = .locationMessage(v)
        }
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.postbackData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.choice {
    case .textMessage?: try {
      guard case .textMessage(let v)? = self.choice else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .urlMessage?: try {
      guard case .urlMessage(let v)? = self.choice else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .callMessage?: try {
      guard case .callMessage(let v)? = self.choice else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .locationMessage?: try {
      guard case .locationMessage(let v)? = self.choice else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if !self.postbackData.isEmpty {
      try visitor.visitSingularStringField(value: self.postbackData, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_Choice, rhs: Sinch_Conversationapi_Type_Choice) -> Bool {
    if lhs.choice != rhs.choice {return false}
    if lhs.postbackData != rhs.postbackData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_CallMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "phone_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CallMessage, rhs: Sinch_Conversationapi_Type_CallMessage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ChoiceMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChoiceMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_message"),
    2: .same(proto: "choices"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textMessage) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.choices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._textMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.choices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.choices, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ChoiceMessage, rhs: Sinch_Conversationapi_Type_ChoiceMessage) -> Bool {
    if lhs._textMessage != rhs._textMessage {return false}
    if lhs.choices != rhs.choices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_CardMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CardMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "media_message"),
    4: .same(proto: "choices"),
    5: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._mediaMessage) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.choices) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._mediaMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.choices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.choices, fieldNumber: 4)
    }
    if self.height != .unspecifiedHeight {
      try visitor.visitSingularEnumField(value: self.height, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CardMessage, rhs: Sinch_Conversationapi_Type_CardMessage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._mediaMessage != rhs._mediaMessage {return false}
    if lhs.choices != rhs.choices {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_CarouselMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CarouselMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cards"),
    2: .same(proto: "choices"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cards) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.choices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cards, fieldNumber: 1)
    }
    if !self.choices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.choices, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_CarouselMessage, rhs: Sinch_Conversationapi_Type_CarouselMessage) -> Bool {
    if lhs.cards != rhs.cards {return false}
    if lhs.choices != rhs.choices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ChoiceResponseMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChoiceResponseMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
    2: .standard(proto: "postback_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.postbackData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    if !self.postbackData.isEmpty {
      try visitor.visitSingularStringField(value: self.postbackData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ChoiceResponseMessage, rhs: Sinch_Conversationapi_Type_ChoiceResponseMessage) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.postbackData != rhs.postbackData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_MultipleChoiceResponseMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultipleChoiceResponseMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
    2: .standard(proto: "postback_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.postbackData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    if !self.postbackData.isEmpty {
      try visitor.visitRepeatedStringField(value: self.postbackData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_MultipleChoiceResponseMessage, rhs: Sinch_Conversationapi_Type_MultipleChoiceResponseMessage) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.postbackData != rhs.postbackData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_UrlMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UrlMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_UrlMessage, rhs: Sinch_Conversationapi_Type_UrlMessage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ReplyTo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReplyTo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ReplyTo, rhs: Sinch_Conversationapi_Type_ReplyTo) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ContactInfoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactInfoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "phone_numbers"),
    3: .same(proto: "addresses"),
    4: .standard(proto: "email_addresses"),
    5: .same(proto: "organization"),
    6: .same(proto: "urls"),
    7: .same(proto: "birthday"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.phoneNumbers) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.addresses) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.emailAddresses) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._organization) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.urls) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.birthday) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.phoneNumbers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.phoneNumbers, fieldNumber: 2)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addresses, fieldNumber: 3)
    }
    if !self.emailAddresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.emailAddresses, fieldNumber: 4)
    }
    try { if let v = self._organization {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.urls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.urls, fieldNumber: 6)
    }
    if !self.birthday.isEmpty {
      try visitor.visitSingularStringField(value: self.birthday, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ContactInfoMessage, rhs: Sinch_Conversationapi_Type_ContactInfoMessage) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.phoneNumbers != rhs.phoneNumbers {return false}
    if lhs.addresses != rhs.addresses {return false}
    if lhs.emailAddresses != rhs.emailAddresses {return false}
    if lhs._organization != rhs._organization {return false}
    if lhs.urls != rhs.urls {return false}
    if lhs.birthday != rhs.birthday {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_AddressInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddressInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "city"),
    2: .same(proto: "country"),
    3: .same(proto: "state"),
    4: .same(proto: "street"),
    5: .same(proto: "zip"),
    6: .same(proto: "type"),
    7: .standard(proto: "country_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.city) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.country) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.street) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.zip) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.countryCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 1)
    }
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 2)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 3)
    }
    if !self.street.isEmpty {
      try visitor.visitSingularStringField(value: self.street, fieldNumber: 4)
    }
    if !self.zip.isEmpty {
      try visitor.visitSingularStringField(value: self.zip, fieldNumber: 5)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 6)
    }
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_AddressInfo, rhs: Sinch_Conversationapi_Type_AddressInfo) -> Bool {
    if lhs.city != rhs.city {return false}
    if lhs.country != rhs.country {return false}
    if lhs.state != rhs.state {return false}
    if lhs.street != rhs.street {return false}
    if lhs.zip != rhs.zip {return false}
    if lhs.type != rhs.type {return false}
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_EmailInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmailInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "email_address"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_EmailInfo, rhs: Sinch_Conversationapi_Type_EmailInfo) -> Bool {
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_NameInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NameInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "full_name"),
    2: .standard(proto: "first_name"),
    3: .standard(proto: "last_name"),
    4: .standard(proto: "middle_name"),
    5: .same(proto: "prefix"),
    6: .same(proto: "suffix"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fullName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firstName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lastName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.middleName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.prefix) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.suffix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullName.isEmpty {
      try visitor.visitSingularStringField(value: self.fullName, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.middleName.isEmpty {
      try visitor.visitSingularStringField(value: self.middleName, fieldNumber: 4)
    }
    if !self.prefix.isEmpty {
      try visitor.visitSingularStringField(value: self.prefix, fieldNumber: 5)
    }
    if !self.suffix.isEmpty {
      try visitor.visitSingularStringField(value: self.suffix, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_NameInfo, rhs: Sinch_Conversationapi_Type_NameInfo) -> Bool {
    if lhs.fullName != rhs.fullName {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.middleName != rhs.middleName {return false}
    if lhs.prefix != rhs.prefix {return false}
    if lhs.suffix != rhs.suffix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_OrganizationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "company"),
    2: .same(proto: "department"),
    3: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.company) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.department) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 1)
    }
    if !self.department.isEmpty {
      try visitor.visitSingularStringField(value: self.department, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_OrganizationInfo, rhs: Sinch_Conversationapi_Type_OrganizationInfo) -> Bool {
    if lhs.company != rhs.company {return false}
    if lhs.department != rhs.department {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_PhoneNumberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PhoneNumberInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_PhoneNumberInfo, rhs: Sinch_Conversationapi_Type_PhoneNumberInfo) -> Bool {
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_UrlInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UrlInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_UrlInfo, rhs: Sinch_Conversationapi_Type_UrlInfo) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ListMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "media"),
    4: .same(proto: "sections"),
    5: .standard(proto: "message_properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.messageProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 4)
    }
    if !self.messageProperties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.messageProperties, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ListMessage, rhs: Sinch_Conversationapi_Type_ListMessage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._media != rhs._media {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.messageProperties != rhs.messageProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ListSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListSection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ListSection, rhs: Sinch_Conversationapi_Type_ListSection) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "choice"),
    2: .same(proto: "product"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Sinch_Conversationapi_Type_ChoiceItem?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .choice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .choice(v)
        }
      }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_ProductItem?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .product(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .product(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.item {
    case .choice?: try {
      guard case .choice(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .product?: try {
      guard case .product(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ListItem, rhs: Sinch_Conversationapi_Type_ListItem) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ChoiceItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChoiceItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "media"),
    4: .standard(proto: "postback_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.postbackData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.postbackData.isEmpty {
      try visitor.visitSingularStringField(value: self.postbackData, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ChoiceItem, rhs: Sinch_Conversationapi_Type_ChoiceItem) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._media != rhs._media {return false}
    if lhs.postbackData != rhs.postbackData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ProductItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "marketplace"),
    3: .same(proto: "quantity"),
    4: .standard(proto: "item_price"),
    5: .same(proto: "currency"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.marketplace) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.itemPrice) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.marketplace.isEmpty {
      try visitor.visitSingularStringField(value: self.marketplace, fieldNumber: 2)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 3)
    }
    if self.itemPrice != 0 {
      try visitor.visitSingularFloatField(value: self.itemPrice, fieldNumber: 4)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ProductItem, rhs: Sinch_Conversationapi_Type_ProductItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.marketplace != rhs.marketplace {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.itemPrice != rhs.itemPrice {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Conversationapi_Type_ProductResponseMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductResponseMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
    2: .same(proto: "text"),
    3: .standard(proto: "catalog_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.products) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.catalogID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.catalogID.isEmpty {
      try visitor.visitSingularStringField(value: self.catalogID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Conversationapi_Type_ProductResponseMessage, rhs: Sinch_Conversationapi_Type_ProductResponseMessage) -> Bool {
    if lhs.products != rhs.products {return false}
    if lhs.text != rhs.text {return false}
    if lhs.catalogID != rhs.catalogID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
