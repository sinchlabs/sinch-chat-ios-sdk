// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/conversationapi/type/status.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message/Event Status
///
/// Note that not all statuses
/// are sent by the different channels. 
enum Sinch_Conversationapi_Type_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case queued // = 1
  case queuedOnChannel // = 2
  case delivered // = 3
  case read // = 4
  case failed // = 5
  case switchingChannel // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .queued
    case 2: self = .queuedOnChannel
    case 3: self = .delivered
    case 4: self = .read
    case 5: self = .failed
    case 6: self = .switchingChannel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .queued: return 1
    case .queuedOnChannel: return 2
    case .delivered: return 3
    case .read: return 4
    case .failed: return 5
    case .switchingChannel: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Conversationapi_Type_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Conversationapi_Type_Status] = [
    .unspecified,
    .queued,
    .queuedOnChannel,
    .delivered,
    .read,
    .failed,
    .switchingChannel,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Sinch_Conversationapi_Type_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "QUEUED"),
    2: .same(proto: "QUEUED_ON_CHANNEL"),
    3: .same(proto: "DELIVERED"),
    4: .same(proto: "READ"),
    5: .same(proto: "FAILED"),
    6: .same(proto: "SWITCHING_CHANNEL"),
  ]
}
