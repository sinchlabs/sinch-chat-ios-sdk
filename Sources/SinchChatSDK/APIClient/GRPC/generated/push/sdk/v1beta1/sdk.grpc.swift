//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/push/sdk/v1beta1/sdk.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
///Providing unified public interface for Sinch Push SDK.
///Facade service.
///Exposes public interface.
///Public access controlled by CSSP Platform.
///
/// Usage: instantiate `Sinch_Push_Sdk_V1beta1_SdkServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Push_Sdk_V1beta1_SdkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol? { get }

  func subscribe(
    _ request: Sinch_Push_Sdk_V1beta1_SubscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func confirmDelivery(
    _ request: Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func reply(
    _ request: Sinch_Push_Sdk_V1beta1_ReplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_ReplyRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Sinch_Push_Sdk_V1beta1_SdkServiceClientProtocol {
  internal var serviceName: String {
    return "sinch.push.sdk.v1beta1.SdkService"
  }

  ///
  ///Subscribing for push notifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subscribe(
    _ request: Sinch_Push_Sdk_V1beta1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.push.sdk.v1beta1.SdkService/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  ///
  ///Confirming push notification delivery.
  ///Publishes DeliveryConfirmedEvent meant for adapter.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmDelivery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmDelivery(
    _ request: Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.push.sdk.v1beta1.SdkService/ConfirmDelivery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDeliveryInterceptors() ?? []
    )
  }

  ///
  ///Sending a reply message or event.
  ///Publishes RepliedEvent meant for adapter.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reply(
    _ request: Sinch_Push_Sdk_V1beta1_ReplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_Sdk_V1beta1_ReplyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.push.sdk.v1beta1.SdkService/Reply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplyInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Sinch_Push_Sdk_V1beta1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'confirmDelivery'.
  func makeConfirmDeliveryInterceptors() -> [ClientInterceptor<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'reply'.
  func makeReplyInterceptors() -> [ClientInterceptor<Sinch_Push_Sdk_V1beta1_ReplyRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal final class Sinch_Push_Sdk_V1beta1_SdkServiceClient: Sinch_Push_Sdk_V1beta1_SdkServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.push.sdk.v1beta1.SdkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Push_Sdk_V1beta1_SdkServiceTestClient: Sinch_Push_Sdk_V1beta1_SdkServiceClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Push_Sdk_V1beta1_SdkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Subscribe RPC. This must be called
  /// before calling 'subscribe'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeSubscribeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_SubscribeRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_Sdk_V1beta1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.sdk.v1beta1.SdkService/Subscribe", requestHandler: requestHandler)
  }

  internal func enqueueSubscribeResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_SubscribeRequest>) -> () = { _ in }
  )  {
    let stream = self.makeSubscribeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Subscribe'
  internal var hasSubscribeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.sdk.v1beta1.SdkService/Subscribe")
  }

  /// Make a unary response for the ConfirmDelivery RPC. This must be called
  /// before calling 'confirmDelivery'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeConfirmDeliveryResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.sdk.v1beta1.SdkService/ConfirmDelivery", requestHandler: requestHandler)
  }

  internal func enqueueConfirmDeliveryResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_ConfirmDeliveryRequest>) -> () = { _ in }
  )  {
    let stream = self.makeConfirmDeliveryResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ConfirmDelivery'
  internal var hasConfirmDeliveryResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.sdk.v1beta1.SdkService/ConfirmDelivery")
  }

  /// Make a unary response for the Reply RPC. This must be called
  /// before calling 'reply'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeReplyResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_ReplyRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_Sdk_V1beta1_ReplyRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.sdk.v1beta1.SdkService/Reply", requestHandler: requestHandler)
  }

  internal func enqueueReplyResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_Sdk_V1beta1_ReplyRequest>) -> () = { _ in }
  )  {
    let stream = self.makeReplyResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Reply'
  internal var hasReplyResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.sdk.v1beta1.SdkService/Reply")
  }
}

