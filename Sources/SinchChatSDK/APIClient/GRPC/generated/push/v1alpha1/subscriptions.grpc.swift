//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sinch/push/v1alpha1/subscriptions.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sinch_Push_V1alpha1_SubscriptionsClient`, then call methods of this protocol to make API calls.
internal protocol Sinch_Push_V1alpha1_SubscriptionsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol? { get }

  func register(
    _ request: Sinch_Push_V1alpha1_RegisterSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_V1alpha1_RegisterSubscriptionRequest, Sinch_Push_V1alpha1_Subscription>

  func get(
    _ request: Sinch_Push_V1alpha1_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_V1alpha1_GetSubscriptionRequest, Sinch_Push_V1alpha1_Subscription>

  func list(
    _ request: Sinch_Push_V1alpha1_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_V1alpha1_ListSubscriptionsRequest, Sinch_Push_V1alpha1_ListSubscriptionsResponse>

  func delete(
    _ request: Sinch_Push_V1alpha1_DeleteSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sinch_Push_V1alpha1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Sinch_Push_V1alpha1_SubscriptionsClientProtocol {
  internal var serviceName: String {
    return "sinch.push.v1alpha1.Subscriptions"
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(
    _ request: Sinch_Push_V1alpha1_RegisterSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_V1alpha1_RegisterSubscriptionRequest, Sinch_Push_V1alpha1_Subscription> {
    return self.makeUnaryCall(
      path: "/sinch.push.v1alpha1.Subscriptions/Register",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: Sinch_Push_V1alpha1_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_V1alpha1_GetSubscriptionRequest, Sinch_Push_V1alpha1_Subscription> {
    return self.makeUnaryCall(
      path: "/sinch.push.v1alpha1.Subscriptions/Get",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to List
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func list(
    _ request: Sinch_Push_V1alpha1_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_V1alpha1_ListSubscriptionsRequest, Sinch_Push_V1alpha1_ListSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/sinch.push.v1alpha1.Subscriptions/List",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: Sinch_Push_V1alpha1_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sinch_Push_V1alpha1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/sinch.push.v1alpha1.Subscriptions/Delete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

internal protocol Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'register'.
  func makeRegisterInterceptors() -> [ClientInterceptor<Sinch_Push_V1alpha1_RegisterSubscriptionRequest, Sinch_Push_V1alpha1_Subscription>]

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Sinch_Push_V1alpha1_GetSubscriptionRequest, Sinch_Push_V1alpha1_Subscription>]

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Sinch_Push_V1alpha1_ListSubscriptionsRequest, Sinch_Push_V1alpha1_ListSubscriptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Sinch_Push_V1alpha1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal final class Sinch_Push_V1alpha1_SubscriptionsClient: Sinch_Push_V1alpha1_SubscriptionsClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol?

  /// Creates a client for the sinch.push.v1alpha1.Subscriptions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal final class Sinch_Push_V1alpha1_SubscriptionsTestClient: Sinch_Push_V1alpha1_SubscriptionsClientProtocol {
  private let fakeChannel: FakeChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol?

  internal var channel: GRPCChannel {
    return self.fakeChannel
  }

  internal init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Sinch_Push_V1alpha1_SubscriptionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Register RPC. This must be called
  /// before calling 'register'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeRegisterResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_RegisterSubscriptionRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_V1alpha1_RegisterSubscriptionRequest, Sinch_Push_V1alpha1_Subscription> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.v1alpha1.Subscriptions/Register", requestHandler: requestHandler)
  }

  internal func enqueueRegisterResponse(
    _ response: Sinch_Push_V1alpha1_Subscription,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_RegisterSubscriptionRequest>) -> () = { _ in }
  )  {
    let stream = self.makeRegisterResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Register'
  internal var hasRegisterResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.v1alpha1.Subscriptions/Register")
  }

  /// Make a unary response for the Get RPC. This must be called
  /// before calling 'get'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeGetResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_GetSubscriptionRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_V1alpha1_GetSubscriptionRequest, Sinch_Push_V1alpha1_Subscription> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.v1alpha1.Subscriptions/Get", requestHandler: requestHandler)
  }

  internal func enqueueGetResponse(
    _ response: Sinch_Push_V1alpha1_Subscription,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_GetSubscriptionRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Get'
  internal var hasGetResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.v1alpha1.Subscriptions/Get")
  }

  /// Make a unary response for the List RPC. This must be called
  /// before calling 'list'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeListResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_ListSubscriptionsRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_V1alpha1_ListSubscriptionsRequest, Sinch_Push_V1alpha1_ListSubscriptionsResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.v1alpha1.Subscriptions/List", requestHandler: requestHandler)
  }

  internal func enqueueListResponse(
    _ response: Sinch_Push_V1alpha1_ListSubscriptionsResponse,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_ListSubscriptionsRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'List'
  internal var hasListResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.v1alpha1.Subscriptions/List")
  }

  /// Make a unary response for the Delete RPC. This must be called
  /// before calling 'delete'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  internal func makeDeleteResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_DeleteSubscriptionRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Sinch_Push_V1alpha1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/sinch.push.v1alpha1.Subscriptions/Delete", requestHandler: requestHandler)
  }

  internal func enqueueDeleteResponse(
    _ response: SwiftProtobuf.Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<Sinch_Push_V1alpha1_DeleteSubscriptionRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Delete'
  internal var hasDeleteResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/sinch.push.v1alpha1.Subscriptions/Delete")
  }
}

