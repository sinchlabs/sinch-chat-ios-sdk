// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/push/v1alpha1/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sinch_Push_V1alpha1_Platform: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case web // = 1
  case iosSandbox // = 2
  case ios // = 3
  case android // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .web
    case 2: self = .iosSandbox
    case 3: self = .ios
    case 4: self = .android
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .web: return 1
    case .iosSandbox: return 2
    case .ios: return 3
    case .android: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Push_V1alpha1_Platform: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Push_V1alpha1_Platform] = [
    .unspecified,
    .web,
    .iosSandbox,
    .ios,
    .android,
  ]
}

#endif  // swift(>=4.2)

enum Sinch_Push_V1alpha1_PushPayloadType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case message // = 0
  case event // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .message
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .message
    case 1: self = .event
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .message: return 0
    case .event: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sinch_Push_V1alpha1_PushPayloadType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sinch_Push_V1alpha1_PushPayloadType] = [
    .message,
    .event,
  ]
}

#endif  // swift(>=4.2)

struct Sinch_Push_V1alpha1_Config {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var ios: Sinch_Push_V1alpha1_ConfigIOS {
    get {return _ios ?? Sinch_Push_V1alpha1_ConfigIOS()}
    set {_ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  var hasIos: Bool {return self._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
  mutating func clearIos() {self._ios = nil}

  var iosSandbox: Sinch_Push_V1alpha1_ConfigIOS {
    get {return _iosSandbox ?? Sinch_Push_V1alpha1_ConfigIOS()}
    set {_iosSandbox = newValue}
  }
  /// Returns true if `iosSandbox` has been explicitly set.
  var hasIosSandbox: Bool {return self._iosSandbox != nil}
  /// Clears the value of `iosSandbox`. Subsequent reads from it will return its default value.
  mutating func clearIosSandbox() {self._iosSandbox = nil}

  var android: Sinch_Push_V1alpha1_ConfigAndroid {
    get {return _android ?? Sinch_Push_V1alpha1_ConfigAndroid()}
    set {_android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
  var hasAndroid: Bool {return self._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
  mutating func clearAndroid() {self._android = nil}

  var web: Sinch_Push_V1alpha1_ConfigWeb {
    get {return _web ?? Sinch_Push_V1alpha1_ConfigWeb()}
    set {_web = newValue}
  }
  /// Returns true if `web` has been explicitly set.
  var hasWeb: Bool {return self._web != nil}
  /// Clears the value of `web`. Subsequent reads from it will return its default value.
  mutating func clearWeb() {self._web = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: String? = nil
  fileprivate var _ios: Sinch_Push_V1alpha1_ConfigIOS? = nil
  fileprivate var _iosSandbox: Sinch_Push_V1alpha1_ConfigIOS? = nil
  fileprivate var _android: Sinch_Push_V1alpha1_ConfigAndroid? = nil
  fileprivate var _web: Sinch_Push_V1alpha1_ConfigWeb? = nil
}

struct Sinch_Push_V1alpha1_ConfigAndroid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serverKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Push_V1alpha1_ConfigIOS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bundleID: String = String()

  var teamID: String = String()

  var keyID: String = String()

  var certificate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Push_V1alpha1_ConfigWeb {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var privateKey: String = String()

  var publicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Push_V1alpha1_Subscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var externalID: String = String()

  var token: String {
    get {return _token ?? String()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var expireTime: String {
    get {return _expireTime ?? String()}
    set {_expireTime = newValue}
  }
  /// Returns true if `expireTime` has been explicitly set.
  var hasExpireTime: Bool {return self._expireTime != nil}
  /// Clears the value of `expireTime`. Subsequent reads from it will return its default value.
  mutating func clearExpireTime() {self._expireTime = nil}

  var p256Dh: String {
    get {return _p256Dh ?? String()}
    set {_p256Dh = newValue}
  }
  /// Returns true if `p256Dh` has been explicitly set.
  var hasP256Dh: Bool {return self._p256Dh != nil}
  /// Clears the value of `p256Dh`. Subsequent reads from it will return its default value.
  mutating func clearP256Dh() {self._p256Dh = nil}

  var endpoint: String {
    get {return _endpoint ?? String()}
    set {_endpoint = newValue}
  }
  /// Returns true if `endpoint` has been explicitly set.
  var hasEndpoint: Bool {return self._endpoint != nil}
  /// Clears the value of `endpoint`. Subsequent reads from it will return its default value.
  mutating func clearEndpoint() {self._endpoint = nil}

  var platform: Sinch_Push_V1alpha1_Platform = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _token: String? = nil
  fileprivate var _expireTime: String? = nil
  fileprivate var _p256Dh: String? = nil
  fileprivate var _endpoint: String? = nil
}

struct Sinch_Push_V1alpha1_PushPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var body: String = String()

  var type: Sinch_Push_V1alpha1_PushPayloadType {
    get {return _type ?? .message}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: Sinch_Push_V1alpha1_PushPayloadType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.push.v1alpha1"

extension Sinch_Push_V1alpha1_Platform: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_UNSPECIFIED"),
    1: .same(proto: "WEB"),
    2: .same(proto: "IOS_SANDBOX"),
    3: .same(proto: "IOS"),
    4: .same(proto: "ANDROID"),
  ]
}

extension Sinch_Push_V1alpha1_PushPayloadType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MESSAGE"),
    1: .same(proto: "EVENT"),
  ]
}

extension Sinch_Push_V1alpha1_Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Config"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "ios"),
    3: .standard(proto: "ios_sandbox"),
    4: .same(proto: "android"),
    5: .same(proto: "web"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ios) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._iosSandbox) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._android) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._web) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ios {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._iosSandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._android {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._web {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_Config, rhs: Sinch_Push_V1alpha1_Config) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._ios != rhs._ios {return false}
    if lhs._iosSandbox != rhs._iosSandbox {return false}
    if lhs._android != rhs._android {return false}
    if lhs._web != rhs._web {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Push_V1alpha1_ConfigAndroid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigAndroid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serverKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serverKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_ConfigAndroid, rhs: Sinch_Push_V1alpha1_ConfigAndroid) -> Bool {
    if lhs.serverKey != rhs.serverKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Push_V1alpha1_ConfigIOS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigIOS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bundle_id"),
    2: .standard(proto: "team_id"),
    3: .standard(proto: "key_id"),
    4: .same(proto: "certificate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bundleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.teamID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.certificate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 1)
    }
    if !self.teamID.isEmpty {
      try visitor.visitSingularStringField(value: self.teamID, fieldNumber: 2)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 3)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularStringField(value: self.certificate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_ConfigIOS, rhs: Sinch_Push_V1alpha1_ConfigIOS) -> Bool {
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs.teamID != rhs.teamID {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Push_V1alpha1_ConfigWeb: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigWeb"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_key"),
    2: .standard(proto: "public_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.privateKey.isEmpty {
      try visitor.visitSingularStringField(value: self.privateKey, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_ConfigWeb, rhs: Sinch_Push_V1alpha1_ConfigWeb) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Push_V1alpha1_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "external_id"),
    3: .same(proto: "token"),
    4: .standard(proto: "expire_time"),
    5: .same(proto: "p256dh"),
    6: .same(proto: "endpoint"),
    7: .same(proto: "platform"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._token) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._expireTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._p256Dh) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._endpoint) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 2)
    }
    try { if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._expireTime {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._p256Dh {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._endpoint {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    if self.platform != .unspecified {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_Subscription, rhs: Sinch_Push_V1alpha1_Subscription) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs._token != rhs._token {return false}
    if lhs._expireTime != rhs._expireTime {return false}
    if lhs._p256Dh != rhs._p256Dh {return false}
    if lhs._endpoint != rhs._endpoint {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Push_V1alpha1_PushPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.body) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Push_V1alpha1_PushPayload, rhs: Sinch_Push_V1alpha1_PushPayload) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
