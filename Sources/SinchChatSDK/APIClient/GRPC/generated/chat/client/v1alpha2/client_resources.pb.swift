// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/chat/client/v1alpha2/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Chat_Client_V1alpha2_Client {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var projectID: String = String()

  var clientID: String = String()

  var appID: String = String()

  var secret: String {
    get {return _secret ?? String()}
    set {_secret = newValue}
  }
  /// Returns true if `secret` has been explicitly set.
  var hasSecret: Bool {return self._secret != nil}
  /// Clears the value of `secret`. Subsequent reads from it will return its default value.
  mutating func clearSecret() {self._secret = nil}

  var settings: Sinch_Chat_Client_V1alpha2_Settings {
    get {return _settings ?? Sinch_Chat_Client_V1alpha2_Settings()}
    set {_settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  var hasSettings: Bool {return self._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  mutating func clearSettings() {self._settings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _secret: String? = nil
  fileprivate var _settings: Sinch_Chat_Client_V1alpha2_Settings? = nil
}

struct Sinch_Chat_Client_V1alpha2_Settings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatSettings: Sinch_Chat_Client_V1alpha2_ChatSettings {
    get {return _chatSettings ?? Sinch_Chat_Client_V1alpha2_ChatSettings()}
    set {_chatSettings = newValue}
  }
  /// Returns true if `chatSettings` has been explicitly set.
  var hasChatSettings: Bool {return self._chatSettings != nil}
  /// Clears the value of `chatSettings`. Subsequent reads from it will return its default value.
  mutating func clearChatSettings() {self._chatSettings = nil}

  var webChatSettings: Sinch_Chat_Client_V1alpha2_WebChatSettings {
    get {return _webChatSettings ?? Sinch_Chat_Client_V1alpha2_WebChatSettings()}
    set {_webChatSettings = newValue}
  }
  /// Returns true if `webChatSettings` has been explicitly set.
  var hasWebChatSettings: Bool {return self._webChatSettings != nil}
  /// Clears the value of `webChatSettings`. Subsequent reads from it will return its default value.
  mutating func clearWebChatSettings() {self._webChatSettings = nil}

  var mobileChatSettings: Sinch_Chat_Client_V1alpha2_MobileChatSettings {
    get {return _mobileChatSettings ?? Sinch_Chat_Client_V1alpha2_MobileChatSettings()}
    set {_mobileChatSettings = newValue}
  }
  /// Returns true if `mobileChatSettings` has been explicitly set.
  var hasMobileChatSettings: Bool {return self._mobileChatSettings != nil}
  /// Clears the value of `mobileChatSettings`. Subsequent reads from it will return its default value.
  mutating func clearMobileChatSettings() {self._mobileChatSettings = nil}

  var pushSettings: Sinch_Chat_Client_V1alpha2_PushSettings {
    get {return _pushSettings ?? Sinch_Chat_Client_V1alpha2_PushSettings()}
    set {_pushSettings = newValue}
  }
  /// Returns true if `pushSettings` has been explicitly set.
  var hasPushSettings: Bool {return self._pushSettings != nil}
  /// Clears the value of `pushSettings`. Subsequent reads from it will return its default value.
  mutating func clearPushSettings() {self._pushSettings = nil}

  var webPushSettings: Sinch_Chat_Client_V1alpha2_WebPushSettings {
    get {return _webPushSettings ?? Sinch_Chat_Client_V1alpha2_WebPushSettings()}
    set {_webPushSettings = newValue}
  }
  /// Returns true if `webPushSettings` has been explicitly set.
  var hasWebPushSettings: Bool {return self._webPushSettings != nil}
  /// Clears the value of `webPushSettings`. Subsequent reads from it will return its default value.
  mutating func clearWebPushSettings() {self._webPushSettings = nil}

  var mobilePushSettings: Sinch_Chat_Client_V1alpha2_MobilePushSettings {
    get {return _mobilePushSettings ?? Sinch_Chat_Client_V1alpha2_MobilePushSettings()}
    set {_mobilePushSettings = newValue}
  }
  /// Returns true if `mobilePushSettings` has been explicitly set.
  var hasMobilePushSettings: Bool {return self._mobilePushSettings != nil}
  /// Clears the value of `mobilePushSettings`. Subsequent reads from it will return its default value.
  mutating func clearMobilePushSettings() {self._mobilePushSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chatSettings: Sinch_Chat_Client_V1alpha2_ChatSettings? = nil
  fileprivate var _webChatSettings: Sinch_Chat_Client_V1alpha2_WebChatSettings? = nil
  fileprivate var _mobileChatSettings: Sinch_Chat_Client_V1alpha2_MobileChatSettings? = nil
  fileprivate var _pushSettings: Sinch_Chat_Client_V1alpha2_PushSettings? = nil
  fileprivate var _webPushSettings: Sinch_Chat_Client_V1alpha2_WebPushSettings? = nil
  fileprivate var _mobilePushSettings: Sinch_Chat_Client_V1alpha2_MobilePushSettings? = nil
}

struct Sinch_Chat_Client_V1alpha2_ChatSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Chat_Client_V1alpha2_MobileChatSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overrides: Sinch_Chat_Client_V1alpha2_ChatSettings {
    get {return _overrides ?? Sinch_Chat_Client_V1alpha2_ChatSettings()}
    set {_overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return self._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {self._overrides = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overrides: Sinch_Chat_Client_V1alpha2_ChatSettings? = nil
}

struct Sinch_Chat_Client_V1alpha2_WebChatSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overrides: Sinch_Chat_Client_V1alpha2_ChatSettings {
    get {return _overrides ?? Sinch_Chat_Client_V1alpha2_ChatSettings()}
    set {_overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return self._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {self._overrides = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overrides: Sinch_Chat_Client_V1alpha2_ChatSettings? = nil
}

struct Sinch_Chat_Client_V1alpha2_PushSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sinch_Chat_Client_V1alpha2_MobilePushSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overrides: Sinch_Chat_Client_V1alpha2_PushSettings {
    get {return _overrides ?? Sinch_Chat_Client_V1alpha2_PushSettings()}
    set {_overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return self._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {self._overrides = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overrides: Sinch_Chat_Client_V1alpha2_PushSettings? = nil
}

struct Sinch_Chat_Client_V1alpha2_WebPushSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overrides: Sinch_Chat_Client_V1alpha2_PushSettings {
    get {return _overrides ?? Sinch_Chat_Client_V1alpha2_PushSettings()}
    set {_overrides = newValue}
  }
  /// Returns true if `overrides` has been explicitly set.
  var hasOverrides: Bool {return self._overrides != nil}
  /// Clears the value of `overrides`. Subsequent reads from it will return its default value.
  mutating func clearOverrides() {self._overrides = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _overrides: Sinch_Chat_Client_V1alpha2_PushSettings? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.chat.client.v1alpha2"

extension Sinch_Chat_Client_V1alpha2_Client: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Client"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "app_id"),
    4: .same(proto: "secret"),
    5: .same(proto: "settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._secret) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._settings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 3)
    }
    try { if let v = self._secret {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._settings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_Client, rhs: Sinch_Chat_Client_V1alpha2_Client) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs._secret != rhs._secret {return false}
    if lhs._settings != rhs._settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Settings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_settings"),
    2: .standard(proto: "web_chat_settings"),
    3: .standard(proto: "mobile_chat_settings"),
    4: .standard(proto: "push_settings"),
    5: .standard(proto: "web_push_settings"),
    6: .standard(proto: "mobile_push_settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chatSettings) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._webChatSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._mobileChatSettings) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pushSettings) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._webPushSettings) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._mobilePushSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chatSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._webChatSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._mobileChatSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._pushSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._webPushSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._mobilePushSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_Settings, rhs: Sinch_Chat_Client_V1alpha2_Settings) -> Bool {
    if lhs._chatSettings != rhs._chatSettings {return false}
    if lhs._webChatSettings != rhs._webChatSettings {return false}
    if lhs._mobileChatSettings != rhs._mobileChatSettings {return false}
    if lhs._pushSettings != rhs._pushSettings {return false}
    if lhs._webPushSettings != rhs._webPushSettings {return false}
    if lhs._mobilePushSettings != rhs._mobilePushSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_ChatSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.header) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.header.isEmpty {
      try visitor.visitSingularStringField(value: self.header, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_ChatSettings, rhs: Sinch_Chat_Client_V1alpha2_ChatSettings) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_MobileChatSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MobileChatSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "overrides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._overrides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._overrides {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_MobileChatSettings, rhs: Sinch_Chat_Client_V1alpha2_MobileChatSettings) -> Bool {
    if lhs._overrides != rhs._overrides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_WebChatSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WebChatSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "overrides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._overrides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._overrides {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_WebChatSettings, rhs: Sinch_Chat_Client_V1alpha2_WebChatSettings) -> Bool {
    if lhs._overrides != rhs._overrides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_PushSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.header) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.header.isEmpty {
      try visitor.visitSingularStringField(value: self.header, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_PushSettings, rhs: Sinch_Chat_Client_V1alpha2_PushSettings) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_MobilePushSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MobilePushSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "overrides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._overrides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._overrides {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_MobilePushSettings, rhs: Sinch_Chat_Client_V1alpha2_MobilePushSettings) -> Bool {
    if lhs._overrides != rhs._overrides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sinch_Chat_Client_V1alpha2_WebPushSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WebPushSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "overrides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._overrides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._overrides {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Client_V1alpha2_WebPushSettings, rhs: Sinch_Chat_Client_V1alpha2_WebPushSettings) -> Bool {
    if lhs._overrides != rhs._overrides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
