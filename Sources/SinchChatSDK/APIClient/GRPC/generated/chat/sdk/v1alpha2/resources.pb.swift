// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/chat/sdk/v1alpha2/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Sinch_Chat_Sdk_V1alpha2_Entry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deliveryTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deliveryTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deliveryTime = newValue}
  }
  /// Returns true if `deliveryTime` has been explicitly set.
  var hasDeliveryTime: Bool {return self._deliveryTime != nil}
  /// Clears the value of `deliveryTime`. Subsequent reads from it will return its default value.
  mutating func clearDeliveryTime() {self._deliveryTime = nil}

  var payload: Sinch_Chat_Sdk_V1alpha2_Entry.OneOf_Payload? = nil

  var appMessage: Sinch_Conversationapi_Type_AppMessage {
    get {
      if case .appMessage(let v)? = payload {return v}
      return Sinch_Conversationapi_Type_AppMessage()
    }
    set {payload = .appMessage(newValue)}
  }

  var appEvent: Sinch_Conversationapi_Type_AppEvent {
    get {
      if case .appEvent(let v)? = payload {return v}
      return Sinch_Conversationapi_Type_AppEvent()
    }
    set {payload = .appEvent(newValue)}
  }

  var contactMessage: Sinch_Conversationapi_Type_ContactMessage {
    get {
      if case .contactMessage(let v)? = payload {return v}
      return Sinch_Conversationapi_Type_ContactMessage()
    }
    set {payload = .contactMessage(newValue)}
  }

  var contactEvent: Sinch_Conversationapi_Type_ContactEvent {
    get {
      if case .contactEvent(let v)? = payload {return v}
      return Sinch_Conversationapi_Type_ContactEvent()
    }
    set {payload = .contactEvent(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case appMessage(Sinch_Conversationapi_Type_AppMessage)
    case appEvent(Sinch_Conversationapi_Type_AppEvent)
    case contactMessage(Sinch_Conversationapi_Type_ContactMessage)
    case contactEvent(Sinch_Conversationapi_Type_ContactEvent)

  #if !swift(>=4.1)
    static func ==(lhs: Sinch_Chat_Sdk_V1alpha2_Entry.OneOf_Payload, rhs: Sinch_Chat_Sdk_V1alpha2_Entry.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.appMessage, .appMessage): return {
        guard case .appMessage(let l) = lhs, case .appMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.appEvent, .appEvent): return {
        guard case .appEvent(let l) = lhs, case .appEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactMessage, .contactMessage): return {
        guard case .contactMessage(let l) = lhs, case .contactMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactEvent, .contactEvent): return {
        guard case .contactEvent(let l) = lhs, case .contactEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _deliveryTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.chat.sdk.v1alpha2"

extension Sinch_Chat_Sdk_V1alpha2_Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delivery_time"),
    2: .standard(proto: "app_message"),
    3: .standard(proto: "app_event"),
    4: .standard(proto: "contact_message"),
    5: .standard(proto: "contact_event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._deliveryTime) }()
      case 2: try {
        var v: Sinch_Conversationapi_Type_AppMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .appMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .appMessage(v)
        }
      }()
      case 3: try {
        var v: Sinch_Conversationapi_Type_AppEvent?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .appEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .appEvent(v)
        }
      }()
      case 4: try {
        var v: Sinch_Conversationapi_Type_ContactMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .contactMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .contactMessage(v)
        }
      }()
      case 5: try {
        var v: Sinch_Conversationapi_Type_ContactEvent?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .contactEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .contactEvent(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deliveryTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.payload {
    case .appMessage?: try {
      guard case .appMessage(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .appEvent?: try {
      guard case .appEvent(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .contactMessage?: try {
      guard case .contactMessage(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .contactEvent?: try {
      guard case .contactEvent(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Sdk_V1alpha2_Entry, rhs: Sinch_Chat_Sdk_V1alpha2_Entry) -> Bool {
    if lhs._deliveryTime != rhs._deliveryTime {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
