// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sinch/chat/events/v1alpha2/AppMessageDelivered.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
///This is an event dispatched when new AppMessage is delivered by a client.
///It is emitted by a client to inform adapter that previously received message was delivered.
///Also, other clients may be interested in subscribing to that in order to propagate the message to all connected parties.
struct Sinch_Chat_Events_V1alpha2_AppMessageDelivered {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var appMessageData: Sinch_Conversationapi_Adapter_Type_AppMessageData {
    get {return _appMessageData ?? Sinch_Conversationapi_Adapter_Type_AppMessageData()}
    set {_appMessageData = newValue}
  }
  /// Returns true if `appMessageData` has been explicitly set.
  var hasAppMessageData: Bool {return self._appMessageData != nil}
  /// Clears the value of `appMessageData`. Subsequent reads from it will return its default value.
  mutating func clearAppMessageData() {self._appMessageData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _appMessageData: Sinch_Conversationapi_Adapter_Type_AppMessageData? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sinch.chat.events.v1alpha2"

extension Sinch_Chat_Events_V1alpha2_AppMessageDelivered: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppMessageDelivered"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .standard(proto: "app_message_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._appMessageData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try { if let v = self._appMessageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sinch_Chat_Events_V1alpha2_AppMessageDelivered, rhs: Sinch_Chat_Events_V1alpha2_AppMessageDelivered) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs._appMessageData != rhs._appMessageData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
